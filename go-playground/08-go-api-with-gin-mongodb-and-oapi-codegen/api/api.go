// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// NewPost defines model for NewPost.
type NewPost struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// Post defines model for Post.
type Post struct {
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = NewPost

// PutPostsIdJSONRequestBody defines body for PutPostsId for application/json ContentType.
type PutPostsIdJSONRequestBody = NewPost

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all posts
	// (GET /posts)
	GetPosts(c *gin.Context)
	// Create a new post
	// (POST /posts)
	PostPosts(c *gin.Context)
	// Delete a post
	// (DELETE /posts/{id})
	DeletePostsId(c *gin.Context, id string)
	// Get a post by ID
	// (GET /posts/{id})
	GetPostsId(c *gin.Context, id string)
	// Update a post
	// (PUT /posts/{id})
	PutPostsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPosts(c)
}

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPosts(c)
}

// DeletePostsId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePostsId(c, id)
}

// GetPostsId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsId(c, id)
}

// PutPostsId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPostsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/posts", wrapper.GetPosts)
	router.POST(options.BaseURL+"/posts", wrapper.PostPosts)
	router.DELETE(options.BaseURL+"/posts/:id", wrapper.DeletePostsId)
	router.GET(options.BaseURL+"/posts/:id", wrapper.GetPostsId)
	router.PUT(options.BaseURL+"/posts/:id", wrapper.PutPostsId)
}

type GetPostsRequestObject struct {
}

type GetPostsResponseObject interface {
	VisitGetPostsResponse(w http.ResponseWriter) error
}

type GetPosts200JSONResponse []Post

func (response GetPosts200JSONResponse) VisitGetPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPostsRequestObject struct {
	Body *PostPostsJSONRequestBody
}

type PostPostsResponseObject interface {
	VisitPostPostsResponse(w http.ResponseWriter) error
}

type PostPosts201JSONResponse Post

func (response PostPosts201JSONResponse) VisitPostPostsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeletePostsIdRequestObject struct {
	Id string `json:"id"`
}

type DeletePostsIdResponseObject interface {
	VisitDeletePostsIdResponse(w http.ResponseWriter) error
}

type DeletePostsId204Response struct {
}

func (response DeletePostsId204Response) VisitDeletePostsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetPostsIdRequestObject struct {
	Id string `json:"id"`
}

type GetPostsIdResponseObject interface {
	VisitGetPostsIdResponse(w http.ResponseWriter) error
}

type GetPostsId200JSONResponse Post

func (response GetPostsId200JSONResponse) VisitGetPostsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutPostsIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutPostsIdJSONRequestBody
}

type PutPostsIdResponseObject interface {
	VisitPutPostsIdResponse(w http.ResponseWriter) error
}

type PutPostsId200JSONResponse Post

func (response PutPostsId200JSONResponse) VisitPutPostsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all posts
	// (GET /posts)
	GetPosts(ctx context.Context, request GetPostsRequestObject) (GetPostsResponseObject, error)
	// Create a new post
	// (POST /posts)
	PostPosts(ctx context.Context, request PostPostsRequestObject) (PostPostsResponseObject, error)
	// Delete a post
	// (DELETE /posts/{id})
	DeletePostsId(ctx context.Context, request DeletePostsIdRequestObject) (DeletePostsIdResponseObject, error)
	// Get a post by ID
	// (GET /posts/{id})
	GetPostsId(ctx context.Context, request GetPostsIdRequestObject) (GetPostsIdResponseObject, error)
	// Update a post
	// (PUT /posts/{id})
	PutPostsId(ctx context.Context, request PutPostsIdRequestObject) (PutPostsIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetPosts operation middleware
func (sh *strictHandler) GetPosts(ctx *gin.Context) {
	var request GetPostsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPosts(ctx, request.(GetPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPosts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPostsResponseObject); ok {
		if err := validResponse.VisitGetPostsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPosts operation middleware
func (sh *strictHandler) PostPosts(ctx *gin.Context) {
	var request PostPostsRequestObject

	var body PostPostsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPosts(ctx, request.(PostPostsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPosts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostPostsResponseObject); ok {
		if err := validResponse.VisitPostPostsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePostsId operation middleware
func (sh *strictHandler) DeletePostsId(ctx *gin.Context, id string) {
	var request DeletePostsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePostsId(ctx, request.(DeletePostsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePostsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePostsIdResponseObject); ok {
		if err := validResponse.VisitDeletePostsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostsId operation middleware
func (sh *strictHandler) GetPostsId(ctx *gin.Context, id string) {
	var request GetPostsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostsId(ctx, request.(GetPostsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPostsIdResponseObject); ok {
		if err := validResponse.VisitGetPostsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutPostsId operation middleware
func (sh *strictHandler) PutPostsId(ctx *gin.Context, id string) {
	var request PutPostsIdRequestObject

	request.Id = id

	var body PutPostsIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutPostsId(ctx, request.(PutPostsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPostsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutPostsIdResponseObject); ok {
		if err := validResponse.VisitPutPostsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yVQWsbMRCF/8oy7VHNbtoegm5JA8FQiqH0FHxQVmNbQSsp0ijBmP3vRSM7ru2QYmja",
	"3oRmpaf3zRt2Db0fgnfoKIFcQ+qXOChefsOnqU9UliH6gJEMcqH3jtBxgVYBQUKiaNwCRgFkyOILlVFA",
	"xIdsImqQt5vPxPNVM7E94O/usady1enifURFqC+5OvdxUAQStCL8QGYoekdHjD7JhoAc9Gka45G1smXc",
	"3PP9VQiurF80l9MJCHjEmIx3IOH8rDvriqgP6FQwIOETbwkIipbMow0+1dYtkN9UYCky3k00SLhBmvIH",
	"hX8K3qWK8WPXHdBUIVjT88n2PhX9bRrKyhAOfPB9xDlIeNfuctNuQtNyx3Z+VYxqVe1qTH00gaqv77nv",
	"MaV5ts32Ucwp5WFQcQUSvppEjbK2qe5GAWGThn17RXHn7yFjoiuvVydZe83RdgbG/QBTzDgeET3/Y7I7",
	"zX1wX2rAD2DV3UY1Dp8YGNdrMNq10WOR02iR8JjgNe8zw4nmYEU1IGFMIG/XYIpsCRsIcGoobTUaDlmI",
	"X3wdxn92xOlzfc9piajvbNTGoHg97n/LSvfmLf89mRukDZbmbtVMrnla8kvDkt8czj+ewP+hHT/4B/Ec",
	"VC5ifNyCztGChCVRkG1rfa/s0ieSF91F18I4G38GAAD//47e4DqRBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
