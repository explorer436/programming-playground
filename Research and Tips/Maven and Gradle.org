* My thoughts about using Maven or Gradle as build tools for java applications:

*** Create an empty java project from terminal using maven

    #+begin_src 
    mvn archetype:generate -DgroupId=com.my.company -DartifactId=test-java-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
    #+end_src

    Reference: https://maven.apache.org/guides/mini/guide-creating-archetypes.html

*** Maven installation in a Linux computer

    See LinuxTips.org and then use the same pattern to add maven bin folder to PATH in .bashrc file.

    Or set it in /etc/profile. See SettingJavaHomeInLinux.org and then use the same pattern to add maven bin folder to PATH. Try the .bashrc option first.

    https://maven.apache.org/install.html
    
*** Run a single test class with maven    
    #+begin_src 
    mvn test -Dtest=classname
    #+end_src
    
*** Run a single test method with maven  
    #+begin_src 
    mvn test -Dtest=classname#methodname
    #+end_src

*** Maven vs Gradle

Starting out with Gradle may seem easy, but based on previous experiences, using Maven will give us much more flexibility.
When it comes to Maven's power at confuguring profiles, environment variables, etc. the time spent to learn it once will be a good investment.

Just stick to using maven (and not Gradle) as much as you can.

Based on what I have seen so far, Maven is much more powerful and flexible if you invest a little bit of time learning it once.

Spend some time to understand further differences between the two.

*** Using a specific version of dependency in Maven

How to force a maven project to use older version of a dependency instead of a new version from another dependency?

You can exclude the cyclic dependencies by using the <exclusions> tag in your pom.xml like this:

  #+begin_src 
  <dependency>
    <groupId>sample.ProjectB</groupId>
    <artifactId>Project-B</artifactId>
    <version>1.0-SNAPSHOT</version>
    <exclusions>
      <exclusion>
        <groupId>sample.ProjectE</groupId> <!-- Exclude Project-E from Project-B -->
        <artifactId>Project-E</artifactId>
      </exclusion>
    </exclusions>
  </dependency>
  #+end_src

Reference: https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html

*** Understanding dependencies used by a project using Maven

How to understand maven dependency tree for a project?
Use this command to look at the dependency tree and make changes if necessary:

#+begin_src 
mvn dependency:tree
#+end_src

*** Displaying available Maven dependency updates:

To simply know if and how we can update our project, the right tool for the job is this command: `mvn versions:display-dependency-updates`
This command checks and shows if there are updates to the versions of the dependencies.

*** Issues with refreshing Gradle dependencies in Eclipse

If there is trouble refreshing the dependencies in Eclipse after making changes to the build.gradle file, follow the steps below:

1. check if you have included eclipse gradle plugin. `apply plugin : 'eclipse'`
1. Go to your project terminal
1. Run `gradle tasks --all` to see the list of all available gradle tasks.
1. If the task `cleanEclipse` is available, run it.
1. If not, run `gradle cleanEclipseProject` and `gradle cleanEclipseClasspath` separately.
1. After that, run `gradle eclipse`
1. Go to the project in eclipse and refresh the project.

This should bring all the latest dependencies down and you should see them in the `Referenced Libraries` section.

*** Helpful Gradle commands

Go to the EAR folder in command prompt:

    #+BEGIN_EXAMPLE
    C:\XXXXXXXXXXXXXEAR
    #+END_EXAMPLE
And use this command to build EAR.

    #+BEGIN_EXAMPLE
    gradle clean ear --info
    gradle clean testall --info
    gradle clean testAll ear â€“-info
    #+END_EXAMPLE

From folder :      C:\XXXXXXXXXXEAR\build\distributions
To folder :        C:\WASLP_dev\tools\WASLP8559\wlp\usr\servers\default\dropins
Windows command to copy the EAR from a source folder to a destination folder:
    #+BEGIN_EXAMPLE
    xcopy C:\XXXXXXXXXXXXXXEAR\build\distributions C:\WASLP_dev\tools\WASLP8559\wlp\usr\servers\default\dropins
    #+END_EXAMPLE

From folder :      C:\Users\n0281526\Documents\services-property-insurance-partner-exchange\PiAcordSalesMediationServiceEAR
To folder :        C:\WASLP_dev\tools\WASLP8559\wlp\usr\servers\default\dropins
Windows command to copy the EAR from a source folder to a destination folder:
    #+BEGIN_EXAMPLE
    xcopy C:\WASLP_dev\workspaces\git_repo\services-property-insurance-partner-exchange\PiAcordSalesMediationServiceEAR\build\distributions C:\WASLP_dev\tools\WASLP8559\wlp\usr\servers\default\dropins
    #+END_EXAMPLE

*** To exclude a few tasks from the Gradle build process : 
    #+BEGIN_EXAMPLE
    ./gradlew build -x checkstyleMain -x findbugsMain -x test -x jacocoTestCoverageVerification -x pmdMain
    #+END_EXAMPLE
