===============

Build the docker image using this:
# docker build -t rustdockerdemo/hello-world-rest-service .
docker build -t hello-world-rest-service .


Run it using this command: (mapping port 8080 of the container to 8080 on the host)

# docker run -p 8080:8080 rustdockerdemo/hello-world-rest-service
docker run -p 8080:8080 hello-world-rest-service

===============

docker build -t my-app .
docker run -p 8080:8080 my-app

===============

What is the difference between ~Dockerfile~ and ~Dockerfile_backup~?

Look at the secion ~Save Space by Compiling Without Tooling~ in https://www.docker.com/blog/simplify-your-deployments-using-the-rust-official-image/

While Rust tooling is useful, it’s not always essential for applications. There are scenarios where just the compiled application is needed.

Per the Rust Project’s developers, this image is merely 80MB. That’s tiny compared to our previous image (about 4 GB). This saves disk space, reduces application bloat, and makes it easier to track layer-by-layer changes. That outcome appears paradoxical, since your build is multi-stage (adding layers) yet shrinks significantly.

Additionally, naming your stages and using those names in each COPY ensures that each COPY won’t break if you reorder your instructions.

This solution lets you copy key artifacts between stages and abandon unwanted artifacts. You’re not carrying unwanted components forward into your final image. As a bonus, you’re also building your Rust application from a single Dockerfile.
