* Executor framework

Started since java 1.5

[[../multithreading/Callable and Runnable.org]]

Runnable (vs) Callable comes into point when we are using Executer framework.

ExecutorService is a subinterface of [[https://docs.oracle.com/javase/tutorial/essential/concurrency/exinter.html][Executor]], which accepts both Runnable and Callable tasks.

Before java 1.5, multi-threading was implemented using Interface Runnable.
Runnable was part of java since 1.0

The problem with Runnables is, after the thread task is completed, we do not have a way to collect the Threads information (the results from the execution of those threads).

~Callables~ were introduced to solve this problem.

There are a few different ways to delegate tasks for execution to an ExecutorService.

1. ~execute(Runnable task):void~ crates new thread but not blocks main thread or caller thread as this method return void.
1. ~submit(Callable<?>):Future<?>~, ~submit(Runnable):Future<?>~ crates new thread and blocks main thread when you are using ~future.get()~

** Assigning tasks to ExecutorService

We can assign tasks to the ExecutorService using several methods including execute(), which is inherited from the Executor interface, and also submit(), invokeAny() and invokeAll().

The execute() method is void and doesn't give any possibility to get the result of a task's execution or to check the task's status (is it running):

#+begin_src 
executorService.execute(runnableTask);  
#+end_src

submit() submits a Callable or a Runnable task to an ExecutorService and returns a result of type Future:

#+begin_src 
Future<String> future = 
  executorService.submit(callableTask);  
#+end_src

invokeAny() assigns a collection of tasks to an ExecutorService, causing each to run, and returns the result of a successful execution of one task (if there was a successful execution):

#+begin_src 
String result = executorService.invokeAny(callableTasks);  
#+end_src

invokeAll() assigns a collection of tasks to an ExecutorService, causing each to run, and returns the result of all task executions in the form of a list of objects of type Future:

#+begin_src 
List<Future<String>> futures = executorService.invokeAll(callableTasks);  
#+end_src

[[https://www.baeldung.com/java-executor-service-tutorial]]  
