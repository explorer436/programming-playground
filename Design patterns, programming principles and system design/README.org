* Design patterns, programming principles and system design

Someone has already solved your (design) problems. We need to exploit the wisdom and lessons learned by other developers who have been down the same design problem road. The best way to use patterns is to load your brain with them and then recognize places in your designs and existing applications where you can apply them. Instead of code reuse, with patterns you get experience reuse.

Design patterns give you a shared vocabulary with other developers. Once you have got the vocabulary, you can more easily communicate with other developers and inspire those who don't know patterns to start learning them. It also elevates your thinking about architectures by letting you think at the pattern level, not the nitty-gritty object level. If you communicate in patterns, then other developers know immediately and precisely the design you are describing.

** How to use Design Patterns?

   We have all used off-the-shelf libraries and frameworks. We take them, write some code against their APIs, compile them into our programs, and benefit from a lot of code someone else has written. Libraries and frameworks go a long way towards a development model where we can just pick and choose components and plug them right in. But, they don't help us structure our own applications in ways that are easier to understand, more maintainable and flexible. That is where Design Patterns come in.

   Design Patterns do not go directly into your code, they first go into your brain. Once you've loaded your brain with a good working knowledge of patterns, you can then start to apply them to your new designs, and rework your old code when you find it is degrading into an inflexible mess of spaghetti code. 

** References

https://github.com/DovAmir/awesome-design-patterns

https://github.com/donnemartin/system-design-primer

[[https://java-design-patterns.com/principles/][Programming principles]]

[[../Design patterns, programming principles and system design/Strategy pattern.org]]

[[../Design patterns, programming principles and system design/Observer pattern.org]]
