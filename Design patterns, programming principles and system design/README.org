* Design patterns, programming principles and system design

Someone has already solved your (design) problems. We need to exploit the wisdom and lessons learned by other developers who have been down the same design problem road. The best way to use patterns is to load your brain with them and then recognize places in your designs and existing applications where you can apply them. Instead of code reuse, with patterns you get experience reuse.

Design patterns give you a shared vocabulary with other developers. Once you have got the vocabulary, you can more easily communicate with other developers and inspire those who don't know patterns to start learning them. It also elevates your thinking about architectures by letting you think at the pattern level, not the nitty-gritty object level. If you communicate in patterns, then other developers know immediately and precisely the design you are describing.

** References

https://github.com/DovAmir/awesome-design-patterns

https://github.com/donnemartin/system-design-primer

[[https://java-design-patterns.com/principles/][Programming principles]]

[[../Design patterns, programming principles and system design/Strategy pattern.org]]

[[../Design patterns, programming principles and system design/Observer pattern.org]]
