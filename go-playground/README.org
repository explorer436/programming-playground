* How to build

To build the binary, run: ~go build~ in the root folder.

It will put a binary file in the same folder with the name of the module (defined in ~go.mod~).

We can run it with ~./hello~

* Dependencies on external modules

Add the ~import~ statements in the ~go~ files and run the command ~go mod tidy~ in the root directory.

The ~go mod tidy~ command adds missing module requirements for imported packages and removes requirements on modules that aren't used anymore. 

* Testing

~go test~ will run the tests only in the directory in which it it run.
e.g. To run tests on ~morestrings~ package, we have to run ~go test~ in that directory.

How to `go test` all tests in my project?

This should run all tests in current directory and all of its subdirectories: 
#+begin_src 
go test ./...
#+end_src

This should run all tests for given specific directories:
#+begin_src 
go test ./tests/... ./unit-tests/... ./my-packages/...
#+end_src

This should run all tests with import path prefixed with foo/:
#+begin_src 
go test foo/...
#+end_src

This should run all tests import path prefixed with foo:
#+begin_src 
go test foo...
#+end_src

This should run all tests in your $GOPATH:
#+begin_src 
go test ...
#+end_src

* Style guides

https://google.github.io/styleguide/go/decisions.html

* Additional resouces and ideas for projects

   https://gophercises.com/ 

   
Go has the best standard http library. Do a little middleware chaining for logs and errors and that will give you a solid grasp of lots of patterns without being too complicated.

build something like small web servers with net/http & then go for a frameworks like gin or fiber with database integrations & caching systems like redis. build small cli tools for yourself. try to write some small program for your daily repetitive tasks.

My first Go project was replacing a bash script that was too slow. I learn about Go routine and then I DoS my service by having Go be far too efficient and had to learn about waitgroups and channels.

So, obviously getting familiar with the core language is best but here's some really handy libraries to keep in mind.

CLI flags parsing:
- https://github.com/alecthomas/kong
- https://github.com/spf13/cobra

Config Loading:
- https://github.com/spf13/viper

Or just search for awesome-go and find a more choices than you know what to do with. https://github.com/avelino/awesome-go

Check out this great blog post by the Go team for more details on the design and implementation of slices in Go: https://go.dev/blog/slices-intro
