// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Album defines model for Album.
type Album struct {
	// Artist Album author, can be empty for multi-artist compilations.
	Artist *string `json:"artist,omitempty"`

	// Id ID is a unique string that determines album.
	Id string `json:"id"`

	// Price Price in USD.
	Price *float32 `json:"price,omitempty"`

	// Title Title of the album.
	Title string `json:"title"`
}

// RestErrResponse defines model for RestErrResponse.
type RestErrResponse struct {
	// Code Application-specific error code.
	Code *int `json:"code,omitempty"`

	// Context Application context.
	Context *map[string]interface{} `json:"context,omitempty"`

	// Error Error message.
	Error *string `json:"error,omitempty"`

	// Status Status text.
	Status *string `json:"status,omitempty"`
}

// PostAlbumsJSONRequestBody defines body for PostAlbums for application/json ContentType.
type PostAlbumsJSONRequestBody = Album

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Albums
	// (GET /albums)
	GetAlbums(c *gin.Context)
	// Post Albums
	// (POST /albums)
	PostAlbums(c *gin.Context)
	// Get Album By ID
	// (GET /albums/{id})
	GetAlbumByID(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAlbums operation middleware
func (siw *ServerInterfaceWrapper) GetAlbums(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAlbums(c)
}

// PostAlbums operation middleware
func (siw *ServerInterfaceWrapper) PostAlbums(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAlbums(c)
}

// GetAlbumByID operation middleware
func (siw *ServerInterfaceWrapper) GetAlbumByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAlbumByID(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/albums", wrapper.GetAlbums)
	router.POST(options.BaseURL+"/albums", wrapper.PostAlbums)
	router.GET(options.BaseURL+"/albums/:id", wrapper.GetAlbumByID)
}

type GetAlbumsRequestObject struct {
}

type GetAlbumsResponseObject interface {
	VisitGetAlbumsResponse(w http.ResponseWriter) error
}

type GetAlbums200JSONResponse []Album

func (response GetAlbums200JSONResponse) VisitGetAlbumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAlbumsRequestObject struct {
	Body *PostAlbumsJSONRequestBody
}

type PostAlbumsResponseObject interface {
	VisitPostAlbumsResponse(w http.ResponseWriter) error
}

type PostAlbums201JSONResponse Album

func (response PostAlbums201JSONResponse) VisitPostAlbumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAlbums409JSONResponse RestErrResponse

func (response PostAlbums409JSONResponse) VisitPostAlbumsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbumByIDRequestObject struct {
	Id int `json:"id"`
}

type GetAlbumByIDResponseObject interface {
	VisitGetAlbumByIDResponse(w http.ResponseWriter) error
}

type GetAlbumByID200JSONResponse Album

func (response GetAlbumByID200JSONResponse) VisitGetAlbumByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlbumByID404JSONResponse RestErrResponse

func (response GetAlbumByID404JSONResponse) VisitGetAlbumByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Albums
	// (GET /albums)
	GetAlbums(ctx context.Context, request GetAlbumsRequestObject) (GetAlbumsResponseObject, error)
	// Post Albums
	// (POST /albums)
	PostAlbums(ctx context.Context, request PostAlbumsRequestObject) (PostAlbumsResponseObject, error)
	// Get Album By ID
	// (GET /albums/{id})
	GetAlbumByID(ctx context.Context, request GetAlbumByIDRequestObject) (GetAlbumByIDResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAlbums operation middleware
func (sh *strictHandler) GetAlbums(ctx *gin.Context) {
	var request GetAlbumsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlbums(ctx, request.(GetAlbumsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlbums")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAlbumsResponseObject); ok {
		if err := validResponse.VisitGetAlbumsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAlbums operation middleware
func (sh *strictHandler) PostAlbums(ctx *gin.Context) {
	var request PostAlbumsRequestObject

	var body PostAlbumsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAlbums(ctx, request.(PostAlbumsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAlbums")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAlbumsResponseObject); ok {
		if err := validResponse.VisitPostAlbumsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlbumByID operation middleware
func (sh *strictHandler) GetAlbumByID(ctx *gin.Context, id int) {
	var request GetAlbumByIDRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlbumByID(ctx, request.(GetAlbumByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlbumByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAlbumByIDResponseObject); ok {
		if err := validResponse.VisitGetAlbumByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUTW/jNhD9K8S0R9lSunvY6pY028Jo0Rqb9lT4QEtji4H4EXJoVDD034sh7VixHTRt",
	"g70R5HDezHtvZg+N1c4aNBSg3kNoOtQyHW/7ddR8cN469KQwXUtPKhCfWgyNV46UNVDncCEjddYXopFG",
	"rFGgdjSIjfVCx57ULH8WjKl6yT/DHAqgwSHUEMgrs4WxANVeAizuhQpCimjUU0SRgwV1kkSLhF4rg0FI",
	"LoNzamV+QbOlDuqbKwjOqwYvQZZ8LZQRfzzcH7IozTRUzzlM1Gv0nIMU9Vdy/M7Xwm4EdfjGesYCPD5F",
	"5bGF+k9u/5h99Rxr14/YEON+wUCfvf+CwVkT8FKjxrZX6rp1rldNYn0WHDZqoxqB3lsv+MNECGUIt7nH",
	"xhrCv5Lesm0Vf5b9coo2Fq/jiMP3Se5TGwn6sszPqSKNIcgtXnVHIEkxXP58SPfiDHDC8VkJfKXMxl6R",
	"sFNBBPQ7doPzdqdaDOJ2uRBkhZZGbg/KZvtmH+QRSGFQwA59yMl2N/NqXnHh1qGRTkENH+bV/AMU4CR1",
	"qZMyp+PjFhPdTHEicdFCDT8h5fTAVsnCp+jvqipLbghN1unEf/kYuITjXPNJEWaYbz1uoIZvytMGKA/j",
	"X+bZPzEmvZdDJuwlUb/9nIgNUWvph1yneC6U5Dawn3O6FY+dDVeaW9ow7e4pYqA72w7/qrE39DPmQXvB",
	"3s37g5yT9INHSdgynx+r798N73wNXEO2ZtOr5PWpSMz36yqNxdGN5V614z9a8m5Y3Ccre6l5EXOyPSjG",
	"Z3tDAUbqtFZamO458hGLSa/ny2dc/U+r/yex2NGs08evqdOvlsSPNpr2tWkSd4NILF+IxfHod0faz/dY",
	"Wl9tbNI25gWWg6GA6HuooSNydVn2tpF9ZwPVn6pPVblfy4BLSd3Im0x6Jdd91uD4kHfmRsaeoAY9zJoY",
	"yOoZvyfVx3FcjX8HAAD//yjJls9fCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
