* Reading material

https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html

https://aws.amazon.com/blogs/compute/enriching-event-driven-architectures-with-aws-event-fork-pipelines/

* To do

Implement employee-cdk-stack using Java and Rust and Go and Python

https://cdkworkshop.com/50-java.html

https://cdkworkshop.com/60-go.html

https://cdkworkshop.com/30-python.html

* How to manually delete a cluster in case the pipelines do not work?

1. Find the target cluster to delete -> Go to Tasks tab -> Hit Stop All button
1. Go back to Services tab -> Click on the service -> Hit Delete button
1. Go to ALB page under EC2 service -> Find target ALB you want to delete -> Go to its Listeners tab -> Go into the listeners list and find target groups associated with that listener (default and current ones if applicable) -> Find those target groups in the Target Groups view
1. Go back to ALB Listeners tab -> Delete that listener
1. Go to the Target Groups view -> Delete those target group(s). Make sure you search for all the target groups for that stack. Look for prefix (search by the name of your application) to identify the target groups belonged to that stack
1. Go to the Auto Scaling Groups view -> Delete the auto scaling group(s)
1. Go to the Launch Configuration view -> Delete the launch configuration(s)
1. Go to the Load Balancer view -> Delete the target load balancer (you will need to edit the ALB attribute, and disable the Delete Protection option)
1. Go to the Target Groups view -> Look for any target group associated with that stack.
1. Go to the ECS view -> Delete the target cluster
1. Done


* How to find out what the current active environment is?

  We have to use Route53.

* IAM users

1. Instead of logging in with root user access, create an IAM user and use the credentials for the IAM user to login to the console or do programming.
1. And grant permissions to this IAM user on a need to know basis:
   AmazonS3FullAccess

* Managing credentials in various environments

For local development, there are multiple ways:

1. Using BasicAWSCredentials in the application

   Sample application.property file
   #+begin_src 
   bucket:
     name: your-bucket-name
     uploadExpirationTime: 3600000
     downloadExpirationTime: 3600000
         
   # https://cloud.spring.io/spring-cloud-static/spring-cloud-aws/2.2.0.M2/reference/html/   
   # https://docs.awspring.io/spring-cloud-aws/docs/current/reference/html/appendix.html   
   # AWS properties
   cloud:
     aws:
       region:
         static: us-east-1
       stack:
         auto: false
       credentials:
         accessKey: your-access-key
         secretKey: your-secret-key
   #+end_src

   And then, using these in the configuration files in the application.

   Sample config file:
   #+begin_src 
   import org.springframework.beans.factory.annotation.Value;
   import org.springframework.context.annotation.Bean;
   import org.springframework.context.annotation.Configuration;
   
   import com.amazonaws.auth.AWSStaticCredentialsProvider;
   import com.amazonaws.auth.BasicAWSCredentials;
   import com.amazonaws.regions.Regions;
   import com.amazonaws.services.s3.AmazonS3;
   import com.amazonaws.services.s3.AmazonS3ClientBuilder;
   
   @Configuration
   public class AmazonS3ClientConfig {
   
   	@Value("${cloud.aws.credentials.accessKey}")
   	private String awsId;
   
   	@Value("${cloud.aws.credentials.secretKey}")
   	private String awsKey;
   
   	@Value("${cloud.aws.region.static}")
   	private String region;
   
   	@Bean
   	public AmazonS3 s3client() {
   
   		BasicAWSCredentials awsCredentials = new BasicAWSCredentials(awsId, awsKey);
   		AmazonS3 amazonS3Client = AmazonS3ClientBuilder.standard().withRegion(Regions.fromName(region))
   				.withCredentials(new AWSStaticCredentialsProvider(awsCredentials)).build();
   
   		return amazonS3Client;
   	}
   
   }
   #+end_src
