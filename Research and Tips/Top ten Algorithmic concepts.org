* Top 10 algorithms or algorithmic concepts for coding interviews - by Techlead and algoexpert :TOC_9:
  - [[#1--depth-first-search--][1.  depth first search -]]
  - [[#2--breadth-first-search--][2.  breadth first search -]]
  - [[#3--matching-brackets-problems][3.  matching brackets problems]]
  - [[#4--making-use-of-hashtables][4.  making use of hashtables]]
  - [[#5--how-to-manipulate-multiple-variables-or-pointers-at-once][5.  how to manipulate multiple variables or pointers at once:]]
  - [[#6--reversing-a-linked-list][6.  reversing a linked list]]
  - [[#7--sorting-fundamentals][7.  sorting fundamentals]]
  - [[#8--recursion][8.  recursion]]
  - [[#9--knowing-how-to-construct-custom-datastructures][9.  knowing how to construct custom datastructures.]]
  - [[#10--binary-search][10.  binary search]]

** 1.  depth first search - 

graph traversal or tree traversal

tree structures - getting to the leaf nodes and backtracking.

e.g. binary tree structure with letters in a string

** 2.  breadth first search -

e.g. take a tree and print it level by level

difference between 1 and 2 it the order of traversal.

** 3.  matching brackets problems

is it valid?

what is the next bracket to be added?

using stacks

other ways are possible but not very straightforward

** 4.  making use of hashtables

e.g. 2D matrix - visit the matrix but somehow keep track of the elements that are already visited.

e.g. largest amount of zeroes that are next to each other.

use hashtable to make sure yu don't revisit grid coordinates that are already visited.

e.g. nth fibonacci number

** 5.  how to manipulate multiple variables or pointers at once:

e.g. using two pointers for a string

e.g. using two pointers to traverse a linked list and each of them are going at different speeds from one another.

e.g. longest palindromic substring in a string. for every letter, start two pointers going in the opposite directions.

** 6.  reversing a linked list

e.g. are there duplicates in a linked list

e.g. remove the duplicates in a linked list

creating a class for the node and then using it for traversals

** 7.  sorting fundamentals

quick sort, merge sort, insertion sort, heap sort, bubble sort

not to memorize them but understand them fundamentally.

know the runtimes for these sorts.

** 8.  recursion

** 9.  knowing how to construct custom datastructures.

e.g. suffix tree like datastructure.

capture a bunch of strings in a datastructure.

** 10.  binary search

quick sort works similar to binary search.

