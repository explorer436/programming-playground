* Examples of the functionality and use cases of the CompletableFuture class that was introduced as a Java 8 Concurrency API improvement.

The order in which the packages in the project should be studied:

1. Using CompletableFuture as a Simple Future 
1. CompletableFuture with Encapsulated Computation Logic
1. Processing Results of Asynchronous Computations
1. Combining Futures
1. Difference Between thenApply() and thenCompose()
1. Running multiple Futures in parallel
1. Handing Errors
1. Async Methods


Since the ~CompletableFuture~ class implements the ~CompletionStage~ interface, we first need to understand the contract of that interface. It represents a stage of a certain computation which can be done either synchronously or asynchronously. You can think of it as just a single unit of a pipeline of computations that ultimately generates a final result of interest. This means that several CompletionStages can be chained together so that one stage’s completion triggers the execution of another stage, which in turn triggers another, and so on.

In addition to implementing the ~CompletionStage~ interface, ~CompletableFuture~ also implements ~Future~, which represents a pending asynchronous event, with the ability to explicitly complete this Future, hence the name CompletableFuture.

** Asynchronous Computation in Java:

*** Future vs CompletableFuture

~CompletableFuture~ is an extension to Java’s ~Future~ API which was introduced in Java 5.

A Future is used as a reference to the result of an asynchronous computation. It provides an ~isDone()~ method to check whether the computation is done or not, and a ~get()~ method to retrieve the result of the computation when it is done.

The Future interface was added in Java 5 to serve as a result of an asynchronous computation, but it did not have any methods to combine these computations or handle possible errors.

Future API was a good step towards asynchronous programming in Java but it lacked some important and useful features -

*** Limitations of Future

1. It cannot be manually completed :

   Let’s say that you’ve written a function to fetch the latest price of an e-commerce product from a remote API. 
   Since this API call is time-consuming, you’re running it in a separate thread and returning a Future from your function.

   Now, let’s say that If the remote API service is down, then you want to complete the Future manually by the last cached price of the product.

   Can you do this with Future? No!

2. You cannot perform further action on a Future’s result without blocking:

   Future does not notify you of its completion. It provides a get() method which blocks until the result is available.

   You don’t have the ability to attach a callback function to the Future and have it get called automatically when the Future’s result is available.

3. Multiple Futures cannot be chained together :

   Sometimes you need to execute a long-running computation and when the computation is done, you need to send its result to another long-running computation, and so on.

   You can not create such asynchronous workflow with Futures.

4. You can not combine multiple Futures together :

   Let’s say that you have 10 different Futures that you want to run in parallel and then run some function after all of them completes. You can’t do this as well with Future.

5. No Exception Handling :

   Future API does not have any exception handling construct.

   Whoa! So many limitations right? Well, That’s why we have CompletableFuture. You can achieve all of the above with CompletableFuture.

   CompletableFuture implements Future and CompletionStage interfaces and provides a huge set of convenience methods for creating, chaining and combining multiple Futures. It also has a very comprehensive exception handling support.

Java 8 introduced the CompletableFuture class. Along with the Future interface, it also implemented the CompletionStage interface. This interface defines the contract for an asynchronous computation step that we can combine with other steps.

*** What’s a CompletableFuture?

~CompletableFuture~ is used for asynchronous programming in Java. Asynchronous programming is a means of writing non-blocking code by running a task on a separate thread than the main application thread and notifying the main thread about its progress, completion or failure.
This way, your main thread does not block/wait for the completion of the task and it can execute other tasks in parallel.
Having this kind of parallelism greatly improves the performance of your programs.

~CompletableFuture~ is at the same time a building block and a framework, with about 50 different methods for composing, combining, and executing asynchronous computation steps and handling errors.
Such a large API can be overwhelming, but these mostly fall in several clear and distinct use cases.

**** References and TODOs:

http://cr.openjdk.java.net/~iris/se/12/latestSpec/api/java.base/java/util/concurrent/CompletionStage.html

https://cr.openjdk.java.net/~iris/se/11/latestSpec/api/java.base/java/util/concurrent/CompletableFuture.html

Runnable vs. Callable in Java: 
https://www.baeldung.com/java-runnable-callable

Baeldung projects:
https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-concurrency-basic

Java/Springboot Blocking vs Non-Blocking REST API Implementation:

https://vimalma1093.medium.com/java-springboot-blocking-vs-non-blocking-rest-api-implementation-fe5643840287

https://segmentfault.com/a/1190000040347139/en#:~:text=2.1%20Java%20thread%20status&text=It%20is%20generally%20called%20%22synchronization,or%20%22non%2Dblocking%22.

TODO
https://www.alibabacloud.com/blog/how-java-is-used-for-asynchronous-non-blocking-programming_597808

https://www.javatpoint.com/java-nio-vs-input-output
