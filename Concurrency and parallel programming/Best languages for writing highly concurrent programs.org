* What are the best languages for writing highly concurrent programs?

Ulf Wiger
Specializing in massively concurrent, distributed, high-availability programmingAuthor has 65 answers and 158.6K answer views6y
There are different flavors of concurrency, and (unsurprisingly) different languages address these differently. Note that there are middleware and cloud environments that address these areas, esp. for mainstream languages. I will leave them aside and focus on languages that have

1. Embarrassingly parallel code. This is where lots of tasks are executed in parallel with no interaction between them and no (or minimal) synchronization required. Here, languages like Erlang and Haskell and Clojure work well, and also make use of multiple cores. From what I can tell, Go also works well here.
1. Data parallelism, where you use parallelization to speed up e.g. computation jobs; the concurrent tasks have to synchronize at various points in a problem-specific fashion. Erlang is a bit hit-and-miss here, since it isn't the fastest computation language, and also doesn't thrive on data sharing. Haskell is at the forefront of language and compiler support in this area, and Clojure has some very nice data structures and constructs for shared-memory concurrency. However, in the exotic niche of huge computation clusters, Erlang is attractive due to its native support for distributed processing and fault tolerance. I would imagine that Go suffers a bit similarly to Erlang, in that the robust way to approach the problem - channels - is a bit too inefficient. While it lets you use e.g. semaphores for synchronization, so do most mainstream languages; I consider that fairly primitive support.
1. Orchestration logic, where the concurrent tasks need to coordinate with each other in a stateful manner, is the domain of Erlang. Cloud Haskell and Akka are modeled after Erlang, and Akka has a considerable commercial user base. Elixir is a Ruby-like language that runs on the Erlang VM and has the same expressive power for concurrency as Erlang. Go has a solid CSP-like concurrency model, but lacks Erlang's error handling support (i.e. built-in logic for recovering from process crashes)

----------------------

Dmitry Ponyatov
Lathe Machinist at EPK (2017–present)Author has 540 answers and 505.4K answer views2y
The Actors programming model gives a good background to design concurrent, parallel and distributed systems. And the Erlang language was especially done to achieve it in production use in real.

If you can implement the Actor model as a library (say Akka), you also will have good chances to get its features in any language even in single-threaded language implementations (via RPC and cross-node messaging).

On the other side, this model will force you to change your programming style from the roots, and not all tasks can be done well in it. So the tasks you are solving can limit its acceptance.

and classical book on implementation:

Agha, Gul Abdulnabi
ACTORS: A Model of Concurrent Computation in Distributed Systems
MIT Press, 1985
AITR-844

----------------------

Jake Januzelli
B.A in Mathematics, Cornell University (Graduated 2020)7y
Go and Haskell are particularly known for their concurrency. I can attest to Go's effectiveness with concurrent programming from personal experience.

----------------------

Rudra Dinkar
Hindu, Brahman, Computer sci, maths , R1b-M343 etc4y
Just saying concurrent is not enough. For choosing which is the best language, need to know whats the degree of parallelism and what type of things are you trying to achieve.

For customer owned devices, that are typically multicore NUMA machines, you’d most likely do application specific things. And for these types best languages are asm, C, C++, java in that order.

For tasks that need to be parallelized at like multi- machine scale, and have some sort of distribution wide state, it makes more sense to use something like erlang, since it inherently supports the distributed communications.

Per Ounce performance , no functional language will ever beat C or C++. But, the flip side is that the code is hard to maintain, and not very intuitive.

On the other side of the story, functional languages are elegant to write code in, and you don’t need to worry about details that much. Whether it will work in practice is highly dependent on the run time supported by those languages.

----------------------

Tim Yann
Software developer and sys admin6y
Rust is a newer option that has a really great concurrency story. It’ll prevent a lot of concurrency bugs.

----------------------

Aaron Christianson
Software Developer at Goethe University Frankfurt (2016–present)3y

What are the best concurrent programming languages?
Any functional language that emphasizes immutability is going to be a good fit for concurrent programming. Haskell, Clojure, and Elixir/Erlang are especially well-suited to concurrent programming because they have strict rules governing where mutation can take place, making it more difficult to accidentally create a race condition.

Rust is another option. While it relies on mutation more than functional languages, it has a lot of compile-time checks to ensure you are handling shared state safely between threads.

Go is famous for the simplicity it brings to concurrent programming. Go doesn’t protect you from race conditions, but it does give you a simple default mutex, the channel, and if you rely on it and avoid mutating state, you can also write safe programs.

Go’s concurrency is also famous because of the clever scheduler it uses. Go programs are started with a thread pool that has a fixed number of threads as well as an asynchronous event loop. When a goroutine hits IO, it will sleep in the event loop, and when it’s ready, it will be scheduled to run in one of the threads. This means computationally intensive tasks will run in parallel on the CPU, while IO-bound tasks won’t take up a thread. Erlang created this concurrency model long ago, but its peculiar syntax probably scared a lot of people away. Julia will have the same threading interface in the next release. (1.3, in release candidate as I write this)

I would like to add that any programming language that supports multiprocessing is probably pretty good for parallel execution. OS processes (by default) don’t share state and typically communicate with sockets or other kinds of byte streams. Processes are heavier than threads, but you’re never going to have more threads executing simultaneously than you have cores in your machine. Better to simply have a process pool with a process for each core and delegate tasks to workers as required.

In addition to providing strong isolation from the OS, process-based concurrency architectures can scale much more. Thread-based models only work on a single machine, but processes often communicate over the network stack anyway and can be easily transferred to a cluster.

Of course, there are also drawbacks to processes (IPC and serializing/de-serializing messages has more overhead than shared memory), but overall the isolation they provide is going to lead to safer and vastly more scalable software designs.

----------------------
