* My thoughts about using Maven or Gradle as build tools for java applications:

*** Maven Archetypes

    https://maven.apache.org/guides/introduction/introduction-to-archetypes.html
    
    If you have an existing application and wish to use it as a template for some other new applications that are not created yet, you can create an archetype from the existing application and then use that archetype to generate new applications using the command below.
    
    #+begin_src 
    mvn archetype: generate
    -DarchetypeGroupId=com.companyName.domainName
    -DarchetypeArtifactId=domain-archetype
    -DarchetypeVersion=1.0.0-SNAPSHOT
    -DgroupId=com.companyname.domainname
    -DartifactId=application-name
    -Dversion=1.0.0-SNAPSHOT
    -Dpackage=com.companyname.domainname.application.whateverelseyouwanttoaddhere
    -Dinvoker=ApplicationName
    -DspecName=application-name
    -Dport=8002
    -Dtitle="Application Name API"
    -B  
    #+end_src

*** Create an empty java project from terminal using maven archetypes

    #+begin_src 
    mvn archetype:generate -DgroupId=com.my.company -DartifactId=test-java-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
    #+end_src

    Reference: https://maven.apache.org/guides/mini/guide-creating-archetypes.html

*** Using custom jvm-config with maven

    If maven is having trouble working with the jdk version installed in the machine, and if you need to use custom jvm-config with maven in a project, this is the way to do it:
    
    In the project, create a directory with this name: ".mvn"
    In this directory, create a file with this name: "jvm.config"
    Add your custom config in that file:

    #+begin_src 
    --add-opens=java.base/java.util=ALL-UNNAMED
    #+end_src

*** How to generate maven settings.xml in an enterprise environment?

    You can generate the settings.xml file from the artifactory.
    If you have the link the artifactory, follow these steps to generate the settings.xml
    url for JFrog artifactory -> Set Me Up -> Tool - Maven -> Type password (if the artifactory is protected) and click on "generate the code snippet" and download the file. If the artifactory needs a password, the downloaded file will have a hash of the password.
    Drop this file in your .m2 directory and the applications in local computer should be able to connect to the artifactory.


*** Maven installation in a Linux computer

    See LinuxTips.org and then use the same pattern to add maven bin folder to PATH in .bashrc file.

    Or set it in /etc/profile. See SettingJavaHomeInLinux.org and then use the same pattern to add maven bin folder to PATH. Try the .bashrc option first.

    https://maven.apache.org/install.html

*** Run a single test class with maven
    #+begin_src 
    mvn test -Dtest=classname
    #+end_src

*** Run a single test method with maven
    #+begin_src 
    mvn test -Dtest=classname#methodname
    #+end_src

*** Maven vs Gradle

Starting out with Gradle may seem easy, but based on previous experiences, using Maven will give us much more flexibility.
When it comes to Maven's power at confuguring profiles, environment variables, etc. the time spent to learn it once will be a good investment.

Just stick to using maven (and not Gradle) as much as you can.

Based on what I have seen so far, Maven is much more powerful and flexible if you invest a little bit of time learning it once.

Spend some time to understand further differences between the two.

*** Using a specific version of dependency in Maven

How to force a maven project to use older version of a dependency instead of a new version from another dependency?

You can exclude the cyclic dependencies by using the <exclusions> tag in your pom.xml like this:

#+begin_src 
  <dependency>
    <groupId>sample.ProjectB</groupId>
    <artifactId>Project-B</artifactId>
    <version>1.0-SNAPSHOT</version>
    <exclusions>
      <exclusion>
        <groupId>sample.ProjectE</groupId> <!-- Exclude Project-E from Project-B -->
        <artifactId>Project-E</artifactId>
      </exclusion>
    </exclusions>
  </dependency>  
#+end_src

Reference: https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html

*** Understanding dependencies used by a project using Maven

How to understand maven dependency tree for a project?
Use this command to look at the dependency tree and make changes if necessary:

#+begin_src 
mvn dependency:tree  
#+end_src

*** Displaying available Maven dependency updates:

To simply know if and how we can update our project, the right tool for the job is this command:
#+begin_src 
mvn versions:display-dependency-updates  
#+end_src

This command checks and shows if there are updates to the versions of the dependencies.

*** Issues with refreshing Gradle dependencies in Eclipse

If there is trouble refreshing the dependencies in Eclipse after making changes to the build.gradle file, follow the steps below:

1. check if you have included eclipse gradle plugin. `apply plugin : 'eclipse'`
1. Go to your project terminal
1. Run `gradle tasks --all` to see the list of all available gradle tasks.
1. If the task `cleanEclipse` is available, run it.
1. If not, run `gradle cleanEclipseProject` and `gradle cleanEclipseClasspath` separately.
1. After that, run `gradle eclipse`
1. Go to the project in eclipse and refresh the project.

This should bring all the latest dependencies down and you should see them in the `Referenced Libraries` section.

*** Helpful Gradle commands

***** List all tasks

To look at all the available tasks for a gradle project, use this: 

#+begin_src 
gradlew tasks --all  
#+end_src

***** Publish to maven local

`gradlew publishToMavenLocal`

***** Working with EAR projects

Go to the EAR folder in command prompt:

    #+begin_src 
    C:\XXXXXXXXXXXXXEAR
    #+end_src

And use this command to build EAR.

    #+begin_src 
    gradle clean ear --info
    gradle clean testall --info
    gradle clean testAll ear â€“-info
    #+end_src

From folder :      ~C:\XXXXXXXXXXEAR\build\distributions~
To folder :        ~C:\WASLP_dev\tools\WASLP8559\wlp\usr\servers\default\dropins~

Windows command to copy the EAR from a source folder to a destination folder:
    #+begin_src 
    xcopy C:\XXXXXXXXXXXXXXEAR\build\distributions C:\WASLP_dev\tools\WASLP8559\wlp\usr\servers\default\dropins
    #+end_src

From folder :      ~C:\Users\n0281526\Documents\services-property-insurance-partner-exchange\PiAcordSalesMediationServiceEAR~
To folder :        ~C:\WASLP_dev\tools\WASLP8559\wlp\usr\servers\default\dropins~

Windows command to copy the EAR from a source folder to a destination folder:
    #+begin_src 
    xcopy C:\WASLP_dev\workspaces\git_repo\services-property-insurance-partner-exchange\PiAcordSalesMediationServiceEAR\build\distributions     C:\WASLP_dev\tools\WASLP8559\wlp\usr\servers\default\dropins
    #+end_src

*** To exclude a few tasks from the Gradle build process :
    #+begin_src 
    ./gradlew build -x checkstyleMain -x findbugsMain -x test -x jacocoTestCoverageVerification -x pmdMain
    #+end_src


