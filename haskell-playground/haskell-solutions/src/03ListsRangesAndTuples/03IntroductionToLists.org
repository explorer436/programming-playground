In Haskell, lists are homogenous (stores same type of elements).

In Haskell, strings are just a list of characters. 
"hello" is just syntactic sugar for ['h', 'e', 'l', 'l', 'o'].
Because strings are lists, we can use list functions on them, which is really handy.

* Putting lists together

When you put together two lists (even if you append a singleton list to a list, 
for instance: in ~puttingTwoListsTogether~, internally, Haskell has to walk through the whole list on the left side of ~++~. 
That's not a problem when dealing with lists that aren't too big. 
But putting something at the end of a list that's fifty million entries long is going to take a while.  

#+begin_src haskell :exports both :results output
puttingTwoListsTogether l1 l2 = l1 ++ l2
testList1 = [1,2,3,4]
testList2 = [9,10,11,12]
puttingTwoListsTogether testList1 testList2
#+end_src

#+RESULTS:
: [1,2,3,4,9,10,11,12]

#+begin_src haskell :exports both :results output
"hello" ++ " " ++ "world!"
#+end_src

#+RESULTS:
: hello world!

#+begin_src haskell :exports both :results output
['w','o'] ++ ['o','t']
#+end_src

#+RESULTS:
: woot

* The cons operator

However, putting something at the beginning of a list using the ~:~ operator (also called the cons operator - short for construct) is instantaneous. 

#+begin_src haskell :exports both :results output
consOperatorFirstSample = 'A':" small cat"
consOperatorFirstSample

consOperatorSecondSample = 5:[1,2,3,4,5]
consOperatorSecondSample
#+end_src

#+RESULTS:
: A small cat
: [5,1,2,3,4,5]

The difference between ~++~ and the cons operator is, ~++~ operates on lists and cons operator operates on a single number (or character) and a list of numbers (or characters).

You might be tempted to try writing [1,2]:3 to add an element to the end of a list, but ghci will reject this with an error message, because the first argument of (:) must be an element, and the second must be a list.

How to append an element at the end of a list in Haskell?
Not preferrable because Haskell has to walk through the whole list on the left side first.

#+begin_src haskell :exports both :results output
"hello" ++ ['b']
[1,2,3] ++ [4]
#+end_src

#+RESULTS:
: hellob
: [1,2,3,4]

[1, 2, 3] is just syntactic sugar for 1:2:3:[]
[] is an empty list.
So, 5:[1,2,3,4] is syntactic sugar for 5:1:2:3:4:[]

* Getting elements out of a list


#+begin_src haskell :exports both :results output
getElementOutOfAListByIndex = "Steve Buschmi" !! 6
getElementOutOfAListByIndex
#+end_src

#+RESULTS:
: 'B'

Indexes start at 0.

* List of lists

#+begin_src haskell :exports both :results output
testListOfLists = [[3,2,1], [2,12,1,17], [3,10,100,72,365]]
testListOfLists
#+end_src

#+RESULTS:
: [[3,2,1],[2,12,1,17],[3,10,100,72,365]]

List of list of lists.
#+begin_src haskell :exports both :results output
testListOfListOfLists = [testListOfLists, [[1111], [2222]]]
testListOfListOfLists
#+end_src

#+RESULTS:
: [[[3,2,1],[2,12,1,17],[3,10,100,72,365]],[[1111],[2222]]]

* List comparison

Lists can be compared if the stuff they contain can be compared.

 hint: look up Lexicographical order in wikipedia
 They are compared in lexicographical order.
 If a result can be determined by just looking at the first elements, the subsequent elements are ignored.

#+begin_src haskell :exports both :results output
[3,2,1] > [2,1,0]
#+end_src

#+RESULTS:
: True

#+begin_src haskell :exports both :results output
[3,2,1] > [2,10,100]  -- true because 3 > 2. Having found a result, the comparison stops here.
#+end_src

#+RESULTS:
: True

#+begin_src haskell :exports both :results output
[3,2,1] > [3,1,100]  -- false because 3 is not greater than 3
#+end_src

#+RESULTS:
: True

#+begin_src haskell :exports both :results output
[3,4,2] > [3,4]  -- true
#+end_src

#+RESULTS:
: True

#+begin_src haskell :exports both :results output
[3,4,2] > [2,4]  -- true
#+end_src

#+RESULTS:
: True

#+begin_src haskell :exports both :results output
[3,4,2] == [3,4,2]  -- true
#+end_src

#+RESULTS:
: True

#+begin_src haskell :exports both :results output
[2,12,1] > [3,10,100]  -- false
#+end_src

#+RESULTS:
: False

#+begin_src haskell :exports both :results output
[3] == [3]  -- true
#+end_src

#+RESULTS:
: True

#+begin_src haskell :exports both :results output
[3,4] == [3,5] -- false
#+end_src

#+RESULTS:
: False

#+begin_src haskell :exports both :results output
[3,4] > [3,5] -- true
#+end_src

#+RESULTS:
: False

#+begin_src haskell :exports both :results output
[3,4] < [3,5] -- false
#+end_src

#+RESULTS:
: True

A nice example for when lexicographical ordering does not result in what the user would expect is file names in Windows. 
If you have files named xyz1.txt, xyz2.txt, xyz10.txt and xyz20.txt, the lexicographical order would be: 
xyz1.txt, xyz10.txt, xyz2.txt, xyz20.txt

The comparison does not stop at the first evaluation.
It continues evaluating until a decision can be made.
And a decision can be made as soon as there is an i so that a[i] and b[i] are not equal.
Otherwise the arrays are considered equal.

#+begin_src haskell :exports both :results output
sampleList = [6,5,4,3,2,1]
head sampleList -- takes a list and returns its head. The head of a list is basically its first element. 
tail sampleList -- takes a list and returns its tail. In other words, it chops off a list's head.
last sampleList -- takes a list and returns its last element.
init sampleList -- takes a list and returns everything except its last element. In other words, it chops off a list's last element.
length sampleList
null sampleList -- checks if a list is empty
    -- false
null [] -- checks if a list is empty
    -- true
    -- use this instead of xs == null (to check whether xs is null or not)
reverse sampleList
-- takes number and a list. It extracts that many elements from the beginning of the list.
take 3 sampleList
take 1 sampleList
take 100 sampleList -- If we try to take more elements than there are in the list, it just returns the list. 
take 0 sampleList -- If we try to take 0 elements, we get an empty list. 
-- drops a number of elements from the beginning of a list.
drop 3 sampleList
drop 1 sampleList
drop 100 sampleList -- If we try to drop more elements than there are in the list, it just returns an empty list. 
drop 0 sampleList -- If we try to drop 0 elements, we get the initial list without any changes.
maximum sampleList
minimum sampleList
sum sampleList -- sum takes a list of numbers and returns their sum.
product sampleList -- product takes a list of numbers and returns their product. 
#+end_src

#+RESULTS:
#+begin_example
6
[5,4,3,2,1]
1
[6,5,4,3,2]
6
False
True
[1,2,3,4,5,6]
[6,5,4]
[6]
[6,5,4,3,2,1]
[]
[3,2,1]
[5,4,3,2,1]
[]
[6,5,4,3,2,1]
6
1
21
720
#+end_example

* elem

~elem~ takes a thing and a list of things and tells us if that thing is an element of the list.
It's usually called as an infix function because it's easier to read that way.
#+begin_src haskell :exports both :results output
4 `elem` sampleList
6 `elem` sampleList
10 `elem` sampleList
#+end_src

#+RESULTS:
: True
: True
: False

* Getting stuff done without loops and without variables

We will demonstrate how it’s possible to write code without loops and variables. Using only functions, and recursion.

This is not how loops are written in real-world Haskell code (we have high-level constructs to deal with it). However, values of variables are certainly not changed in real-world Haskell code. This is what makes Haskell an “immutable” language. And it’s important to undestand how it’s possible to write code without actually changing values of variables.

Summing up a list of integers

Let’s use the ~head~ and ~tail~ functions to write our own function that computes the sum of a list of integers:

#+begin_src haskell :exports both :results output
:{
sumOfList :: Int -> [Int] -> Int
sumOfList total lst =
  if (lst == [])
    then total
    else sumOfList (total + (head lst)) (tail lst)
:}
sumOfList 0 [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
: 15

If you notice, we had to pass-in the initial value of the total as 0. If you don’t like this, you can move the core logic to a different function and put the initialisation code in another function, as shown below:

#+begin_src haskell :exports both :results output
:{
sumOfList :: [Int] -> Int
sumOfList lst = sumOfListInternal 0 lst

sumOfListInternal :: Int -> [Int] -> Int
sumOfListInternal total lst =
  if (lst == [])
    then total
    else sumOfListInternal (total + (head lst)) (tail lst)
:}
#+end_src

Notice, how we haven’t used any for or do-while loop. We aren’t even changing the value of any variable. Each step in the recursion is passing new values to the next function call (which happens to be itself!)

Summing-up all even numbers in a list of integers:

#+begin_src haskell :exports both :results output
:{
sumOfEven :: Int -> [Int] -> Int
sumOfEven total lst =
  if (lst == [])
    then total
    else if (mod (head lst) 2) == 0
      then sumOfEven (total + (head lst)) (tail lst)
      else sumOfEven total (tail lst)

:}
#+end_src

Doubling all numbers in a list of integers:

#+begin_src haskell :exports both :results output
:{
doubleList :: [Int] -> [Int] -> [Int]
doubleList processedList remainingList =
  if (remainingList == [])
    then processedList
    else doubleList (processedList ++ [(head remainingList) * 2]) (tail remainingList)
:}
doubleList [] [1, 2, 3, 4]
#+end_src

#+RESULTS:
: [2,4,6,8]

Converting a String to uppercase:

#+begin_src haskell :exports both :results output
:{
import Data.Char (toUpper)

toUppercase :: [Char] -> [Char]
toUppercase xs = map toUpper xs
:}
toUppercase "hello world"
#+end_src

#+RESULTS:
: Prelude Data.Array Map Data.Char| Prelude Data.Array Map Data.Char| Prelude Data.Array Map Data.Char| Prelude Data.Array Map Data.Char| Prelude Data.Array Map Data.Char| error: expecting a single import declaration
: HELLO WORLD

The String is being treated as a list. In Haskell, String is just another name for [Char], i.e. a string is just a list of Char.

Generating a list of all even numbers till “N”:

#+begin_src haskell :exports both :results output
:{
evenList :: Int -> [Int] -> [Int]
evenList n lst =
  if (n==0)
    then lst
    else if (mod n 2) == 0

      -- the `:` operator adds an item to the beginning of a list.
      then evenList (n - 1) (n:lst)
      else evenList (n - 1) lst
:}
evenList 100 []
#+end_src

#+RESULTS:
: [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]

