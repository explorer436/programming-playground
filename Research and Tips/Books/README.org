* Books to research

https://www.enterpriseintegrationpatterns.com/

https://martinfowler.com/books/eip.html

https://en.wikipedia.org/wiki/Enterprise_Integration_Patterns

* Does studying CLRS really help in cracking the interviews with companies like Google, Microsoft, Facebook, etc?

Jordan Bishop · September 5 Conducted dozens of technical interviews.

Of course. CLRS is like an encyclopedia of data structures & algorithms knowledge, and it really is one of the best books you could use if you’re preparing for your technical interviews. It covers plenty of common and even some obscure topics, such as:

    Elementary data structures
    Hash tables
    Binary search trees
    Dynamic programming
    Minimum spanning trees
    Maximum flow
    Matrix operations
    Approximation algorithms
    Fibonacci heap
    Computational geometry

However, if your intention is to land a job at a big tech company like Google, Facebook, and Microsoft, you’ll need to use more than just CLRS to do so. Here are a few reasons why:

    Not friendly to beginners on the topic: If you’re not familiar with data structures & algorithms to begin with, CLRS will be a long and painful read: you’ll need another resource to learn the basics first.
    Interviewers at FAANG companies aren’t expecting you to write perfect code: They’re also evaluating whether or not you can properly communicate what’s on your mind when you come up with a solution to their problem, and they’d like to see you discussing ways of optimizing your solution with them.
    It doesn’t cover systems design at all: Coding interviews usually have a systems design section as well, and that’s an aspect that CLRS doesn’t cover very well either. This forces you to use more than one resource to adequately prepare for your coding interviews.

If you feel that you could use more preliminary data structures & algorithms knowledge, you could use a book like Grokking Algorithms
, which is an illustrated book that will teach you the fundamentals of data structures & algorithms without delving into obscure math concepts and in the simplest format available. Once you have the fundamentals of DS&A down, you could use a site like LeetCode

as you read CLRS to give a practical application to your newfound knowledge with over 1,000 programming questions similar to the ones you can expect from Google, Facebook, and Microsoft.

On the other hand, if you’re looking for a resource to learn systems design, you may want to try enrolling in a course like Tech Interview Pro

. TIP was designed by a former Google software engineer and has two entire modules on systems design (one basic, one advanced) covering topics such as load balancing, caching, CDNs, databases, redundancy and replication, database sharding, and API design. It also has Q&A sessions with the course’s founder every two weeks.

If you’d like to practice non-technical aspects of the interview such as your communication skills, you’ll want to use a resource like Interviewing.io

, where you can take part in mock interviews (done by other software engineers, some of whom have worked at Facebook and Google) while you receive immediate, objective feedback on your performance.

Good luck with your interviews.

* What is the best book for learning algorithms and data structures, becoming a better programmer and cracking top tech interviews?

Igor Markov · January 6, 2014 EECS Prof at Michigan

Originally Answered: I am baffled by the number of books on algorithms and data structures what is the single best book to learn everything in algorithms and data structures to be a better programmer and cracking top tech interviews?

You won't crack top tech interviews with the CLRS book alone because it ignores practical programming languages. At tech interviews, you need to write code on a whiteboard in real time using C++, Java or C#, which requires significant skill and practice, as well as a number of good examples.

If you need one book, I recommend this one:
Data Structures & Algorithm Analysis in C++: Mark A. Weiss (note that it's the 4th edition; 3rd edition is OK, but does not use C++11)

But that is probably not enough to develop problem-solving skills.
There are (at least) two excellent books to use when preparing for tech interviews:

1. Cracking the Coding Interview: 150 Programming Questions and Solutions: Gayle Laakmann McDowell
1. Elements of Programming Interviews: 300 Questions and Solutions: Adnan Aziz, Amit Prakash, Tsung-Hsien Lee

There are several other books targeting interviews in the financial industry.

* Is software development one of the most intellectually/mentally rigorous careers in the world?

Bruce F. Webster · Updated November 15 . Corporate IT Consultant, Expert Witness at BFWA (2001–present)

“Rigorous”? Sadly, no. The late Gerald (Jerry) Weinberg, about 40–50 years ago, made this observation:

If architects built buildings the way that programmers build software, the first woodpecker that came along would destroy civilization.

A bit of hyperbole, but still far too close to reality for comfort. And things haven’t improved nearly enough in the intervening decades.

Now, software development done right is a highly demanding discipline, given the amount of trial-and-error investigation and invention required, the astronomical state space that can occur within a given system, and the challenges of maintaining conceptual unity and consistency when you have multiple developers all working on the same piece of software. But all too often those in management are more focused on saving money and shipping early. And, bluntly, there are a lot of people working as developers who really aren’t capable or qualified.

[ADDED 11/14/20]

I’m surprised (but delighted) that this has gotten more upvotes than anything else I’ve posted to date, especially since it was a brief, somewhat flippant response. :-)

Anyone interested in more of my thoughts on software development can check out the website for the CS 428 (‘real-world software engineering’) class: http://cs428.cs.byu.edu/

that I’ve been teaching at Brigham Young University for four years now.

Here are some of my articles and webposts that I have my students read (along with some great video podcasts by my colleague Dr. Charles Knutson):

Readings and Podcasts: http://cs428.cs.byu.edu/index.php/readings-and-podcasts/

And here are videos of lectures (with accompanying slides) from prior semesters:

Class lecture videos/slides: http://cs428.cs.byu.edu/index.php/class-lecture-videos-slides/

For legal/privacy reasons, I can’t post this semester’s Zoom recordings.

And finally, here’s a list of books I strongly recommend for anyone working in the software engineering field:

Bruce F. Webster & Associates: http://bfwa.com/recommended-readings/

* The 25 best programming books of all-time. A data-backed answer

Pierre de Wulf 26-33 minutes

There are countless lists on the internet claiming to be the list of must-read programming books and it seemed that all those lists always recommended that same books minus two or three odd choices.

Finding good ressources for learning programming is always tricky. Every-one has its own opinion about what book is the best to learn, and as we say in french, “Color and tastes should not be argued about”.

However I thought it would be interesting to trust the wisdom of the crown and to find the books that appeared the most in those “Best Programming Book” lists.

If you want to jump right on the results go take a look below at the full results. If you want to learn about the methodology, bear with me.
Disclaimer: I spent countless hours on this article so I’ve decided to put Amazon affiliation links to see if those kinds of detailed articles could be a viable source of revenue, ... or not

Methodology:
I’ve simply asked Google for a few queries like “Best Programming Books” and its variations of. I have then scrapped all those pages (using ScrapingBee, a web scraping API I’m working on).
I’ve deduplicated the links and ended up with nearly 150 links.  
Using the title of the pages I was also able to quickly discards:
list focused on one particular technology or platform
list focused on one particular year
list focused on free books
Quora and Reddit threads

I ended up with almost 110 HTML files. I went on opening all the files on my browser, open my chrome inspector, found and wrote the CSS selector matching book titles in the article. This took me around 1hours, almost 30 seconds per page.  This also allowed me to discard even more non-relevant pages, and I discarded a lot. In the end I compiled around 70 lists into this one.

At this moment I had this big JSON file referencing the HTML page previously scrapped, and a CSS selector.  Using Python with Beautiful soup, I’ve extracted every text inside DOM elements that matched the CSS selector. I ended up with a huge list of books, not usable without some post- processing.
To find the most quoted programming books I needed to normalize my results.
I had to play with all the different variation like “{title} by {author}” or “{title} - {author}”.  Or “{title}:{subtitle}” and “{title}”, or even all the one containing edition number.  I ended up doing it using this simple custom Python function:

From there it was easy to compute the most recommended books. Now let’s take a look at the list:

25 most recommended programming books of all-time

25. Continuous Delivery by Jez Humble & David Farley (8.8% recommended)

Getting software released to users is often a painful, risky, and time-consuming process. This groundbreaking new book sets out the principles and technical practices that enable rapid, incremental delivery of high quality, valuable new functionality to users. Through automation of the build, deployment, and testing process, and improved collaboration between developers, testers, and operations, delivery teams can get changes released in a matter of hours— sometimes even minutes–no matter what the size of a project or the complexity of its code base.

Jez Humble and David Farley begin by presenting the foundations of a rapid, reliable, low-risk delivery process. Next, they introduce the “deployment pipeline,” an automated process for managing all changes, from check-in to release.  Finally, they discuss the “ecosystem” needed to support continuous delivery, from infrastructure, data and configuration management to governance.

24. Algorithms by Robert Sedgewick & Kevin Wayne (8.8% recommended)

The algorithms in this book represent a body of knowledge developed over the last 50 years that has become indispensable, not just for professional programmers and computer science students but for any student with interests in science, mathematics, and engineering, not to mention students who use computation in the liberal arts.

23. The Self-Taught Programmer by Cory Althoff (8.8% recommended)

I am a self-taught programmer. After a year of self-study, I learned to program well enough to land a job as a software engineer II at eBay.
Once I got there, I realized I was severely under-prepared. I was overwhelmed by the amount of things I needed to know but hadn’t learned yet. My journey learning to program, and my experience at my first job as a software engineer were the inspiration for this book.

This book is not just about learning to program; although you will learn to code. If you want to program professionally, it is not enough to learn to code; that is why, in addition to helping you learn to program, I also cover the rest of the things you need to know to program professionally that classes and books don’t teach you.

“The Self-taught Programmer” is a roadmap, a guide to take you from writing your first Python program, to passing your first technical interview. The path is there. Will you take it?

22. Rapid Development by Steve McConnell (8.8% recommended)

Corporate and commercial software-development teams all want solutions for one important problem—how to get their high-pressure development schedules under control. In RAPID DEVELOPMENT, author Steve McConnell addresses that concern head-on with overall strategies, specific best practices, and valuable tips that help shrink and control development schedules and keep projects moving. Inside, you’ll find: - A rapid-development strategy that can be applied to any project and the best practices to make that strategy work - Candid discussions of great and not-so-great rapid- development practices—estimation, prototyping, forced overtime, motivation, teamwork, rapid-development languages, risk management, and many others - A list of classic mistakes to avoid for rapid-development projects, including creeping requirements, shortchanged quality, and silver-bullet syndrome - Case studies that vividly illustrate what can go wrong, what can go right, and how to tell which direction your project is going - RAPID DEVELOPMENT is the real-world guide to more efficient applications development.

21. Coders at Work by Peter Seibel (10.2% recommended)

This is a who’s who in the programming world - a fascinating look at how some of the best in the world do their work. Patterned after the best selling Founders at Work, the book represents two years of interviews with some of the top programmers of our times.

20. Domain-Driven Design by Eric Evans (10.2% recommended)

Leading software designers have recognized domain modeling and design as critical topics for at least twenty years, yet surprisingly little has been written about what needs to be done or how to do it. Although it has never been clearly formulated, a philosophy has developed as an undercurrent in the object community, which I call “domain-driven design”.  I have spent the past decade focused on developing complex systems in several business and technical domains. I’ve tried best practices in design and development process as they have emerged from the leaders in the object-oriented development community. Some of my projects were very successful; a few failed. A feature common to the successes was a rich domain model that evolved through iterations of design and became part of the fabric of the project.  This book provides a framework for making design decisions and a technical vocabulary for discussing domain design. It is a synthesis of widely accepted best practices along with my own insights and experiences. Projects facing complex domains can use this framework to approach domain-driven design systematically.

19. The Art of Computer Programming by Donald E.  Knuth(10.2% recommended)

Countless readers have spoken about the profound personal influence of Knuth’s work. Scientists have marveled at the beauty and elegance of his analysis, while ordinary programmers have successfully applied his “cookbook” solutions to their day-to-day problems. All have admired Knuth for the breadth, clarity, accuracy, and good humor found in his books.

18. Structure and Interpretation of Computer Programs by Harold Abelson / Gerald Jay Sussman / Julie Sussman (13.2% recommended)

Structure and Interpretation of Computer Programs has had a dramatic impact on computer science curricula over the past decade.  This long-awaited revision contains changes throughout the text. There are new implementations of most of the major programming systems in the book, including the interpreters and compilers, and the authors have incorporated many small changes that reflect their experience teaching the course at MIT since the first edition was published. A new theme has been introduced that emphasizes the central role played by different approaches to dealing with time in computational models: objects with state, concurrent programming, functional programming and lazy evaluation, and nondeterministic programming. There are new example sections on higher- order procedures in graphics and on applications of stream processing in numerical programming, and many new exercises. In addition, all the programs have been reworked to run in any Scheme implementation that adheres to the IEEE standard.

17. Patterns of Enterprise Application Architecture by Martin Fowler (14.7% recommended)

The practice of enterprise application development has benefited from the emergence of many new enabling technologies. Multi-tiered object-oriented platforms, such as Java and .NET, have become commonplace. These new tools and technologies are capable of building powerful applications, but they are not easily implemented. Common failures in enterprise applications often occur because their developers do not understand the architectural lessons that experienced object developers have learned.

16. Programming Pearls by Jon Bentley (16.1% recommended)

Computer programming has many faces. Fred Brooks paints the big picture in The Mythical Man Month; his essays underscore the crucial role of management in large software projects. At a finer grain, Steve McConnell teaches good programming style in Code Complete. The topics in those books are the key to good software and the hallmark of the professional programmer. Unfortunately, though, the workmanlike application of those sound engineering principles isn’t always thrilling – until the software is completed on time and works without surprise.

The columns in this book are about a more glamorous aspect of the profession: programming pearls whose origins lie beyond solid engineering, in the realm of insight and creativity.  Just as natural pearls grow from grains of sand that have irritated oysters, these programming pearls have grown from real problems that have irritated real programmers. The programs are fun, and they teach important programming techniques and fundamental design principles.

15. Peopleware by Tom DeMarco & Tim Lister (17.6% recommended)

The unique insight of this longtime bestseller is that the major issues of software development are human, not technical. They’re not easy issues; but solve them, and you’ll maximize your chances of success.

14. Introduction to Algorithms by Thomas H. Cormen / Charles E. Leiserson / Ronald L. Rivest / Clifford Stein (17.6% recommended)

Some books on algorithms are rigorous but incomplete; others cover masses of material but lack rigor. Introduction to Algorithms uniquely combines rigor and comprehensiveness.  The book covers a broad range of algorithms in depth, yet makes their design and analysis accessible to all levels of readers. Each chapter is relatively self-contained and can be used as a unit of study. The algorithms are described in English and in a pseudocode designed to be readable by anyone who has done a little programming. The explanations have been kept elementary without sacrificing depth of coverage or mathematical rigor.

The first edition became a widely used text in universities worldwide as well as the standard reference for professionals.  The second edition featured new chapters on the role of algorithms, probabilistic analysis and randomized algorithms, and linear programming. The third edition has been revised and updated throughout. It includes two completely new chapters, on van Emde Boas trees and multithreaded algorithms, substantial additions to the chapter on recurrence (now called “Divide-and-Conquer”), and an appendix on matrices. It features improved treatment of dynamic programming and greedy algorithms and a new notion of edge-based flow in the material on flow networks. Many exercises and problems have been added for this edition. The international paperback edition is no longer available; the hardcover is available worldwide.

13. Code by Charles Petzold (19.1% recommended)

What do flashlights, the British invasion, black cats, and seesaws have to do with computers? In CODE, they show us the ingenious ways we manipulate language and invent new means of communicating with each other. And through CODE, we see how this ingenuity and our very human compulsion to communicate have driven the technological innovations of the past two centuries. Using everyday objects and familiar language systems such as Braille and Morse code, author Charles Petzold weaves an illuminating narrative for anyone who’s ever wondered about the secret inner life of computers and other smart machines. It’s a cleverly illustrated and eminently comprehensible story—and along the way, you’ll discover you’ve gained a real context for understanding today’s world of PCs, digital media, and the Internet. No matter what your level of technical savvy, CODE will charm you—and perhaps even awaken the technophile within.

12. Don’t Make Me Think by Steve Krug (19.1% recommended)

Since Don’t Make Me Think was first published in 2000, hundreds of thousands of Web designers and developers have relied on usability guru Steve Krug’s guide to help them understand the principles of intuitive navigation and information design. Witty, commonsensical, and eminently practical, it’s one of the best-loved and most recommended books on the subject.

Now Steve returns with fresh perspective to reexamine the principles that made Don’t Make Me Think a classic–with updated examples and a new chapter on mobile usability. And it’s still short, profusely illustrated...and best of all–fun to read.  If you’ve read it before, you’ll rediscover what made Don’t Make Me Think so essential to Web designers and developers around the world. If you’ve never read it, you’ll see why so many people have said it should be required reading for anyone working on Web sites.

11. Soft Skills by John Sonmez (22% recommended)

For most software developers, coding is the fun part. The hard bits are dealing with clients, peers, and managers, staying productive, achieving financial security, keeping yourself in shape, and finding true love. This book is here to help.

Soft Skills: The software developer’s life manual is a guide to a well-rounded, satisfying life as a technology professional. In it, developer and life coach John Sonmez offers advice to developers on important “soft” subjects like career and productivity, personal finance and investing, and even fitness and relationships. Arranged as a collection of 71 short chapters, this fun-to-read book invites you to dip in wherever you like. A Taking Action section at the end of each chapter shows you how to get quick results. Soft Skills will help make you a better programmer, a more valuable employee, and a happier, healthier person.

10. Cracking the Coding Interview by Gayle Laakmann McDowell (22% recommended)

I am not a recruiter. I am a software engineer. And as such, I know what it’s like to be asked to whip up brilliant algorithms on the spot and then write flawless code on a whiteboard. I’ve been through this as a candidate and as an interviewer.

Cracking the Coding Interview, 6th Edition is here to help you through this process, teaching you what you need to know and enabling you to perform at your very best. I’ve coached and interviewed hundreds of software engineers. The result is this book.

Learn how to uncover the hints and hidden details in a question, discover how to break down a problem into manageable chunks, develop techniques to unstick yourself when stuck, learn (or re-learn) core computer science concepts, and practice on 189 interview questions and solutions.

These interview questions are real; they are not pulled out of computer science textbooks. They reflect what’s truly being asked at the top companies, so that you can be as prepared as possible. WHAT’S INSIDE? - 189 programming interview questions, ranging from the basics to the trickiest algorithm problems. - A walk-through of how to derive each solution, so that you can learn how to get there yourself. - Hints on how to solve each of the 189 questions, just like what you would get in a real interview. - Five proven strategies to tackle algorithm questions, so that you can solve questions you haven’t seen. - Extensive coverage of essential topics, such as big O time, data structures, and core algorithms. - A behind the scenes look at how top companies like Google and Facebook hire developers. - Techniques to prepare for and ace the soft side of the interview: behavioral questions. - For interviewers and companies: details on what makes a good interview question and hiring process.

9. Design Patterns by by Erich Gamma / Richard Helm / Ralph Johnson / John Vlissides (25% recommended)

Capturing a wealth of experience about the design of object- oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves.

The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently.

Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk.

8. Working Effectively with Legacy Code by Michael Feathers (26.4% recommended)

In this book, Michael Feathers offers start-to-finish strategies for working more effectively with large, untested legacy code bases. This book draws on material Michael created for his own renowned Object Mentor seminars: techniques Michael has used in mentoring to help hundreds of developers, technical managers, and testers bring their legacy systems under control. This book also includes a catalog of twenty-four dependency-breaking techniques that help you work with program elements in isolation and make safer changes.

7. The Clean Coder by Robert Martin (27.9% recommended)

Programmers who endure and succeed amidst swirling uncertainty and nonstop pressure share a common attribute: They care deeply about the practice of creating software. They treat it as a craft. They are professionals.  In The Clean Coder: A Code of Conduct for Professional Programmers, legendary software expert Robert C. Martin introduces the disciplines, techniques, tools, and practices of true software craftsmanship. This book is packed with practical advice–about everything from estimating and coding to refactoring and testing. It covers much more than technique: It is about attitude. Martin shows how to approach software development with honor, self-respect, and pride; work well and work clean; communicate and estimate faithfully; face difficult decisions with clarity and honesty; and understand that deep knowledge comes with a responsibility to act.

Great software is something to marvel at: powerful, elegant, functional, a pleasure to work with as both a developer and as a user. Great software isn’t written by machines. It is written by professionals with an unshakable commitment to craftsmanship. The Clean Coder will help you become one of them–and earn the pride and fulfillment that they alone possess.

6. The Mythical Man-Month by Frederick P. Brooks Jr (27.9% recommended)

Few books on software project management have been as influential and timeless as The Mythical Man-Month. With a blend of software engineering facts and thought-provoking opinions, Fred Brooks offers insight for anyone managing complex projects.  These essays draw from his experience as project manager for the IBM System/360 computer family and then for OS/360, its massive software system. Now, 20 years after the initial publication of his book, Brooks has revisited his original ideas and added new thoughts and advice, both for readers already familiar with his work and for readers discovering it for the first time.

5. Head First Design Patterns by Eric Freeman / Bert Bates / Kathy Sierra / Elisabeth Robson (29.4% recommended)

What’s so special about design patterns?  At any given moment, someone struggles with the same software design problems you have. And, chances are, someone else has already solved your problem. This edition of Head First Design Patterns—now updated for Java 8—shows you the tried-and-true, road-tested patterns used by developers to create functional, elegant, reusable, and flexible software. By the time you finish this book, you’ll be able to take advantage of the best design practices and experiences of those who have fought the beast of software design and triumphed.

What’s so special about this book?  We think your time is too valuable to spend struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, Head First Design Patterns uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.

4. Refactoring by Martin Fowler (35% recommended)

As the application of object technology–particularly the Java programming language–has become commonplace, a new problem has emerged to confront the software development community. Significant numbers of poorly designed programs have been created by less-experienced developers, resulting in applications that are inefficient and hard to maintain and extend. Increasingly, software system professionals are discovering just how difficult it is to work with these inherited, non-optimal applications.

For several years, expert-level object programmers have employed a growing collection of techniques to improve the structural integrity and performance of such existing software programs. Referred to as refactoring, these practices have remained in the domain of experts because no attempt has been made to transcribe the lore into a form that all developers could use...until now. In Refactoring: Improving the Design of Existing Software, renowned object technology mentor Martin Fowler breaks new ground, demystifying these master practices and demonstrating how software practitioners can realize the significant benefits of this new process. With proper training a skilled system designer

3. Code Complete by Steve McConnell (42% recommended)

Widely considered one of the best practical guides to programming, Steve McConnell’s original CODE COMPLETE has been helping developers write better software for more than a decade. Now this classic book has been fully updated and revised with leading-edge practices—and hundreds of new code samples—illustrating the art and science of software construction. Capturing the body of knowledge available from research, academia, and everyday commercial practice, McConnell synthesizes the most effective techniques and must-know principles into clear, pragmatic guidance. No matter what your experience level, development environment, or project size, this book will inform and stimulate your thinking—and help you build the highest quality code.

2. Clean Code by Robert C. Martin (66% recommended)

Clean Code is divided into three parts. The first describes the principles, patterns, and practices of writing clean code. The second part consists of several case studies of increasing complexity.  Each case study is an exercise in cleaning up code—of transforming a code base that has some problems into one that is sound and efficient. The third part is the payoff: a single chapter containing a list of heuristics and “smells” gathered while creating the case studies. The result is a knowledge base that describes the way we think when we write, read, and clean code.

1. The Pragmatic Programmer by David Thomas & Andrew Hunt (67% recommended)

The Pragmatic Programmer is one of those rare tech books you’ll read, re-read, and read again over the years. Whether you’re new to the field or an experienced practitioner, you’ll come away with fresh insights each and every time.  Dave Thomas and Andy Hunt wrote the first edition of this influential book in 1999 to help their clients create better software and rediscover the joy of coding. These lessons have helped a generation of programmers examine the very essence of software development, independent of any particular language, framework, or methodology, and the Pragmatic philosophy has spawned hundreds of books, screencasts, and audio books, as well as thousands of careers and success stories.

Now, twenty years later, this new edition re-examines what it means to be a modern programmer. Topics range from personal responsibility and career development to architectural techniques for keeping your code flexible and easy to adapt and reuse.

Conclusion
Although the order might suprise some, by definition, most of you must have heard of these books already.
A few additional things I learned making this list:
Martin Fowler and Steve McConnell are the only author with several books in the list.
Cracking to Code interview is the most recent book on the list, released in 2015.
Python Programming, by John Zelle was the most cited book focused on one laguage. It would have #5 had I taken it into account.

— Pierre de Wulf (@PierreDeWulf) February 18, 2020
edit: Robert C. Martin also have 2 books on the list.

* The 25 best startup books of all-time. A data-backed answer

Pierre de Wulf 23-29 minutes

There are countless lists on the internet claiming to be the list of must-read startup books and it seemed that all those lists always recommended that same books minus two or three odd choices.

I wanted to find out what were the most recommended books about startups, and so I’ve made this. I’ve compiled more than 208 lists and almost 4,000 recommendations found on the internet. To my knowledge, this is the most complete list of its kind on the subject.


25. Delivering Happiness: A Path to Profits, Passion, and Purpose by Tony Hsieh (7.6% recommended)

In Delivering Happiness, Zappos CEO Tony Hsieh shares the different lessons he has learned in business and life, from starting a worm farm to running a pizza business, through LinkExchange, Zappos, and more. Fast-paced and down-to- earth, Deliverin Happiness shows how a very different kind of corporate culture is a powerful model for achieving success- and how by concentrating on the happiness of those around you, you can dramatically increase your own.

24. Shoe Dog: A Memoir by the Creator of Nike by Phil Knight (7.6% recommended)

Knight details the many risks and daunting setbacks that stood between him and his dream - along with his early triumphs. Above all, he recalls the formative relationships with his first partners and employees, a ragtag group of misfits and seekers who became a tight-knit band of brothers. Together, harnessing the transcendent power of a shared mission and a deep belief in the spirit of sport, they built a brand that changed everything.

23. Purple Cow by Seth Godin

You’re either a Purple Cow or you’re not. You’re either remarkable or invisible. Make your choice. What do Apple, Starbucks, Dyson and Pret a Manger have in common? How do they achieve spectacular growth, leaving behind former tried-and-true brands to gasp their last? The old checklist of P’s used by marketers - Pricing, Promotion, Publicity - aren’t working anymore. The golden age of advertising is over. It’s time to add a new P - the Purple Cow.“Purple Cow” describes something phenomenal, something counterintuitive and exciting and flat-out unbelievable. In his new bestseller, Seth Godin urges you to put a Purple Cow into everything you build, and everything you do, to create something truly noticeable.  It’s a manifesto for anyone who wants to help create products and services that are worth marketing in the first place.

22. Outliers: The Story of Success by Malcolm Gladwell (8.1% recommended)

In this stunning new book, Malcolm Gladwell takes us on an intellectual journey through the world of “outliers”–the best and the brightest, the most famous and the most successful. He asks the question: what makes high-achievers different?  His answer is that we pay too much attention to what successful people are like, and too little attention to where they are from: that is, their culture, their family, their generation, and the idiosyncratic experiences of their upbringing. Along the way he explains the secrets of software billionaires, what it takes to be a great soccer player, why Asians are good at math, and what made the Beatles the greatest rock band.

21. The Power of Habit: Why We Do What We Do in Life and Business by Charles Duhigg (8.1% recommended)

In The Power of Habit, award-winning business reporter Charles Duhigg takes us to the thrilling edge of scientific discoveries that explain why habits exist and how they can be changed. Distilling vast amounts of information into engrossing narratives that take us from the boardrooms of Procter & Gamble to the sidelines of the NFL to the front lines of the civil rights movement, Duhigg presents a whole new understanding of human nature and its potential. At its core, The Power of Habit contains an exhilarating argument: The key to exercising regularly, losing weight, being more productive, and achieving success is understanding how habits work. As Duhigg shows, by harnessing this new science, we can transform our businesses, our communities, and our lives.

20. Founders at Work: Stories of Startups’ Early Days by Jessica Livingston ( 8.6% recommended)

For would-be entrepreneurs, innovation managers or just anyone fascinated by the special chemistry and drive that created some of the best technology companies in the world, this book offers both wisdom and engaging insights straight from the source. FaW is a collection of interviews with founders of famous technology companies about what happened in the very earliest days.

19. Hooked: A Guide to Building Habit-Forming Products by Nir Eyal (8.6% recommended)

“Hooked” presents a simple, yet very useful model to channel I wanted to find out what were the most recommended books about startups, and so I’ve made this. I’ve compiled more than 208 lists and almost 4,000 recommendations found on the internet. To my knowledge, this is the most complete list of its kind on the subject.  your thoughts when building a product you want to get in the hands of millions. It’s quick to read (only 140 pages), to-the- point and made a world of difference to our concept&design challenges. We used it a lot to model the behavior of our users and figure out specific areas we missed and needed to focus on in order to get engagement.

Another great value of the book is the in-depth analysis of the hooks we are subject to every day (in Twitter, Facebook, Pinterest, Instagram etc). As you go around the everyday loop you know so well from the user perspective, you see in a structured way the other side of the coin. The side of the people who know how to design behavior patterns and make others tick.

18. The Innovator’s Dilemma: When New Technologies Cause Great Firms to Fail by Clayton M. Christensen (9.1% recommended)

Christensen explains why most companies miss out on new waves of innovation. No matter the industry, he says, a successful company with established products will get pushed aside unless managers know how and when to abandon traditional business practices.  Offering both successes and failures from leading companies as a guide, The Innovator’s Dilemma gives you a set of rules for capitalizing on the phenomenon of disruptive innovation.

17. Art of the Start 2.0: The Time-Tested, Battle-Hardened Guide for Anyone Starting Anything by Guy Kawasaki (9.1% recommended)

In The Art of the Start, Guy Kawasaki brings two decades of experience as one of business’s most original and irreverent strategists to offer the essential guide for anyone starting anything, from a multinational corporation to a church group.  At Apple in the 1980s, he helped lead one of the great companies of the century, turning ordinary consumers into evangelists. As founder and CEO of Garage Technology Ventures, a venture capital firm, he has field-tested his ideas with dozens of newly hatched companies. And as the author of bestselling business books and articles, he has advised thousands of people who are making their startup dreams
real.

16. Tools of Titans: The Tactics, Routines, and Habits of Billionaires, Icons, and World-Class Performers by Tim Ferriss (9.1% recommended)

From the author:
For the last two years, I’ve interviewed more than 200 world- class performers for my podcast, The Tim Ferriss Show. The guests range from super celebs (Jamie Foxx, Arnold Schwarzenegger, etc.) and athletes (icons of powerlifting, gymnastics, surfing, etc.) to legendary Special Operations commanders and black-market biochemists. For most of my guests, it’s the first time they’ve agreed to a two-to-three-hour interview. This unusual depth has helped make The Tim Ferriss Show the first business/interview podcast to pass 100 million downloads.

15. Influence: Science and Practice by Robert B. Cialdini (9.6% recommended)

Written in a narrative style combined with scholarly research, Cialdini combines evidence from experimental work with the techniques and strategies he gathered while working as a salesperson, fundraiser, advertiser, and in other positions inside organizations that commonly use compliance tactics to get us to say “yes.” Widely used in classes, as well as sold to people operating successfully in the business world, the eagerly awaited revision of Influence reminds the reader of the power of persuasion.

14. Traction by Gabriel Weinberg and Justin Mares (9.6% recommended)

Traction will teach you the nineteen channels you can use to build a customer base, and how to pick the right ones for your business. It draws on inter-views with more than forty successful founders, including Jimmy Wales (Wikipedia), Alexis Ohanian (reddit), Paul English (Kayak), and Dharmesh Shah (HubSpot). You’ll learn, for example, how to: Find and use offline ads and other channels your competitors probably aren’t using Get targeted media coverage that will help you reach more customers Boost the effectiveness of your email marketing campaigns by automating staggered sets of prompts and updates Improve your search engine rankings and advertising through online tools and research

13. Rich Dad Poor Dad by Robert T. Kiyosaki (12.9% recommended)

Rich Dad Poor Dad is Robert’s story of growing up with two dads — his real father and the father of his best friend, his rich dad — and the ways in which both men shaped his thoughts about money and investing. The book explodes the myth that you need to earn a high income to be rich and explains the difference between working for money and having your money work for you.

12. The 7 Habits of Highly Effective People by Stephen R.  Covey (12.9% recommended)

One of the most inspiring and impactful books ever written, The 7 Habits of Highly Effective People has captivated readers for 25 years. It has transformed the lives of presidents and CEOs, educators and parents—in short, millions of people of all ages and occupations across the world. This twenty-fifth anniversary edition of Stephen Covey’s cherished classic commemorates his timeless wisdom, and encourages us to live a life of great and enduring purpose.

11. Rework by Jason Fried and David Heinemeier Hansson (14% recommended)

Most business books give you the same old advice: Write a business plan, study the competition, seek investors, yadda yadda. If you’re looking for a book like that, put this one back on the shelf.

Read it and you’ll know why plans are actually harmful, why you don’t need outside investors, and why you’re better off ignoring the competition. The truth is, you need less than you think. You don’t need to be a workaholic. You don’t need to staff up. You don’t need to waste time on paperwork or meetings. You don’t even need an office. Those are all just excuses.

What you really need to do is stop talking and start working.  This book shows you the way. You’ll learn how to be more productive, how to get exposure without breaking the bank, and tons more counterintuitive ideas that will inspire and provoke you.

With its straightforward language and easy-is-better approach, Rework is the perfect playbook for anyone who’s ever dreamed of doing it on their own. Hardcore entrepreneurs, small-business owners, people stuck in day jobs they hate, victims of “downsizing,” and artists who don’t want to starve anymore will all find valuable guidance in these pages.

10. Start with Why by Simon Sinek (14.4% recommended)

Sinek starts with a fundamental question: Why are some people and organizations more innovative, more influential, and more profitable than others? Why do some command greater loyalty from customers and employees alike? Even among the successful, why are so few able to repeat their success over and over?

People like Martin Luther King Jr., Steve Jobs, and the Wright Brothers had little in common, but they all started with WHY.  They realized that people won’t truly buy into a product, service, movement, or idea until they understand the WHY behind it.

START WITH WHY shows that the leaders who’ve had the greatest influence in the world all think, act, and communicate the same way – and it’s the opposite of what everyone else does. Sinek calls this powerful idea The Golden Circle, and it provides a framework upon which organizations can be built, movements can be led, and people can be inspired. And it all starts with WHY.

9. Think and Grow Rich by Napoleon Hill (14.4% recommended)

Think and Grow Rich has been called the “Granddaddy of All Motivational Literature.” It was the first book to boldly ask, “What makes a winner?” The man who asked and listened for the answer, Napoleon Hill, is now counted in the top ranks of the world’s winners himself. The most famous of all teachers of success spent “a fortune and the better part of a lifetime of effort” to produce the “Law of Success” philosophy that forms the basis of his books and that is so powerfully summarized in
this one.

In the original Think and Grow Rich, published in 1937, Hill draws on stories of Andrew Carnegie, Thomas Edison, Henry Ford, and other millionaires of his generation to illustrate his principles. In the updated version, Arthur R. Pell, Ph.D., a nationally known author, lecturer, and consultant in human resources management and an expert in applying Hill’s thought, deftly interweaves anecdotes of how contemporary millionaires and billionaires, such as Bill Gates, Mary Kay Ash, Dave Thomas, and Sir John Templeton, achieved their wealth.  Outmoded or arcane terminology and examples are faithfully refreshed to preclude any stumbling blocks to a new
generation of readers.

8. Good to Great: Why Some Companies Make the Leap and Others Don’t by Jim Collins (14.9% recommended)

Five years ago, Jim Collins asked the question, “Can a good company become a great company and if so, how?” In Good to Great Collins, the author of Built to Last, concludes that it is possible, but finds there are no silver bullets. Collins and his team of researchers began their quest by sorting through a list of 1,435 companies, looking for those that made substantial improvements in their performance over time. They finally settled on 11–including Fannie Mae, Gillette, Walgreens, and Wells Fargo–and discovered common traits that challenged many of the conventional notions of corporate success.  Making the transition from good to great doesn’t require a high-profile CEO, the latest technology, innovative change management, or even a fine-tuned business strategy. At the heart of those rare and truly great companies was a corporate culture that rigorously found and promoted disciplined people to think and act in a disciplined manner. Peppered with dozens of stories and examples from the great and not so great, the book offers a well-reasoned road map to excellence that any organization would do well to consider. Like Built to Last, Good to Great is one of those books that managers and CEOs will be reading and rereading for years to come.

7. The E-Myth Revisited: Why Most Small Businesses Don’t Work and What to Do About It by Michael E. Gerber (15.3% recommended)

An instant classic, this revised and updated edition of the phenomenal bestseller dispels the myths about starting your own business. Small business consultant and author Michael E. Gerber, with sharp insight gained from years of experience, points out how common assumptions, expectations, and even technical expertise can get in the way of running a successful business.

Gerber walks you through the steps in the life of a business— from entrepreneurial infancy through adolescent growing pains to the mature entrepreneurial perspective: the guiding light of all businesses that succeed—and shows how to apply the lessons of franchising to any business, whether or not it is a franchise. Most importantly, Gerber draws the vital, often overlooked distinction between working on your business and working in your business.

6. The 4-Hour Workweek by Timothy Ferriss (15.8% recommended)

Forget the old concept of retirement and the rest of the deferred-life plan–there is no need to wait and every reason not to, especially in unpredictable economic times. Whether your dream is escaping the rat race, experiencing high-end world travel, or earning a monthly five-figure income with zero management, The 4-Hour Workweek is the blueprint.

5. How To Win Friends and Influence People by Dale Carnegie (22.5% recommended)

Dale Carnegie’s rock-solid, time-tested advice has carried countless people up the ladder of success in their business and personal lives. One of the most groundbreaking and timeless bestsellers of all time, How to Win Friends & Influence People will teach you:
Six ways to make people like you
Twelve ways to win people to your way of thinking
Nine ways to change people without arousing resentment
And much more! Achieve your maximum potential—a must- read for the twenty-first century with more than 15 million copies sold!

4. The $100 Startup: Reinvent the Way You Make a Living, Do What You Love, and Create a New Future by Chris Guillebeau (24% recommended)

Still in his early thirties, Chris is on the verge of completing a tour of every country on earth – he’s already visited more than 175 nations – and yet he’s never held a “real job” or earned a regular paycheck. Rather, he has a special genius for turning ideas into income, and he uses what he earns both to support his life of adventure and to give back.  There are many others like Chris – those who’ve found ways to opt out of traditional employment and create the time and income to pursue what they find meaningful. Sometimes, achieving that perfect blend of passion and income doesn’t depend on shelving what you currently do. You can start small with your venture, committing little time or money, and wait to take the real plunge when you’re sure it’s successful.

3. The Hard Thing About Hard Things by Ben Horowitz (24.5% recommended)

Ben Horowitz, cofounder of Andreessen Horowitz and one of Silicon Valley’s most respected and experienced entrepreneurs, offers essential advice on building and running a startup—practical wisdom for managing the toughest problems business school doesn’t cover, based on his popular ben’s blog.

While many people talk about how great it is to start a business, very few are honest about how difficult it is to run one. Ben Horowitz analyzes the problems that confront leaders every day, sharing the insights he’s gained developing, managing, selling, buying, investing in, and supervising technology companies. A lifelong rap fanatic, he amplifies business lessons with lyrics from his favorite songs, telling it straight about everything from firing friends to poaching competitors, cultivating and sustaining a CEO mentality to knowing the right time to cash in.

Filled with his trademark humor and straight talk, The Hard Thing About Hard Things is invaluable for veteran entrepreneurs as well as those aspiring to their own new ventures, drawing from Horowitz’s personal and often humbling experiences.

2. Zero to One by Peter Thiel (29.3% recommended)

The great secret of our time is that there are still uncharted frontiers to explore and new inventions to create. In Zero to One, legendary entrepreneur and investor Peter Thiel shows how we can find singular ways to create those new things.  Thiel begins with the contrarian premise that we live in an age of technological stagnation, even if we’re too distracted by shiny mobile devices to notice. Information technology has improved rapidly, but there is no reason why progress should be limited to computers or Silicon Valley. Progress can be achieved in any industry or area of business. It comes from the most important skill that every leader must master: learning to think for yourself.

Doing what someone else already knows how to do takes the world from 1 to n, adding more of something familiar. But when you do something new, you go from 0 to 1. The next Bill Gates will not build an operating system. The next Larry Page or Sergey Brin won’t make a search engine. Tomorrow’s champions will not win by competing ruthlessly in today’s marketplace. They will escape competition altogether, because their businesses will be unique.

Zero to One presents at once an optimistic view of the future of progress in America and a new way of thinking about innovation: it starts by learning to ask the questions that lead you to find value in unexpected places.

1. The Lean Startup by Eric Ries (44.7% recommended)

Eric Ries defines a startup as an organization dedicated to creating something new under conditions of extreme uncertainty. This is just as true for one person in a garage or a group of seasoned professionals in a Fortune 500 boardroom.  What they have in common is a mission to penetrate that fog of uncertainty to discover a successful path to a sustainable business.

The Lean Startup approach fosters companies that are both more capital efficient and that leverage human creativity more effectively. Inspired by lessons from lean manufacturing, it relies on “validated learning,” rapid scientific experimentation, as well as a number of counter-intuitive practices that shorten product development cycles, measure actual progress without resorting to vanity metrics, and learn what customers really want. It enables a company to shift directions with agility, altering plans inch by inch, minute by minute.

Rather than wasting time creating elaborate business plans, The Lean Startup offers entrepreneurs—in companies of all sizes—a way to test their vision continuously, to adapt and adjust before it’s too late. Ries provides a scientific approach to creating and managing successful startups in a age when companies need to innovate more than ever.

Conclusion
Although the order might suprise some, by definition, most of you must have heard of these books already.
A few additional things I learned making this list: - 
Tim Ferriss is the only author with several books in the list. - The Bible was quoted one time - The Steve Jobs biography by Walter Isaacson is the most quoted biography, being recommended by 6% of the article.

I hope you enjoyed this article.

* Tech lead book recommendations

Look at the recommended books in [[../Good developer skills/Tech lead.org]]

* Reading recommendations from "Continuous Delivery" channel by Dave Farley

REFERENCES:

A History of Programming Languages ➡️ https://cs.brown.edu/~adf/programming...

“The Last Programming Language” Bob Martin ➡️ https://youtu.be/P2yr-3F6PQo

“GOTO statement considered harmful”, Edsger Dijkstra ➡️ https://homepages.cwi.nl/~storm/teach...

Edsger Dijkstra ➡️ https://en.wikipedia.org/wiki/Edsger_...

“The forgotten history of OOP”, Eric Eliot ➡️ https://medium.com/javascript-scene/t...

"The Reactive Manifesto", Jonas Bonér, Dave Farley, Roland Kuhn, and Martin Thompson, ➡️ https://www.reactivemanifesto.org/

BOOKS:

Dave’s NEW BOOK "Modern Software Engineering" is now available on 
Kindle ➡️ https://amzn.to/3DwdwT3

In this book, Dave brings together his ideas and proven techniques to describe a durable, coherent and foundational approach to effective software development, for programmers, managers and technical leads, at all levels of experience.

📖 "Continuous Delivery Pipelines" by Dave Farley
paperback ➡️ https://amzn.to/3gIULlA
ebook version ➡️ https://leanpub.com/cd-pipelines

📖 The original "Continuous Delivery" book by Dave Farley and Jez Humble 
➡️ https://amzn.to/2WxRYmx
