Which book has provided you the most tangible benefits in your life as a computer scientist?

Alan Kay , Still trying to learn how to think better

Most of the writings that got me going early on (starting early in the 60s) were papers.

People who read a lot can never come up with “a single book” for anything.

I’ll just stick to the 60s. Books whose ideas and perspectives had a huge influence on me back then with regard to computing included:

1 “The Molecular Biology Of The Gene” (1965) by James Watson (I was learning molecular biology, and this spilled over into computing after I started grad school in 1966). It’s all about being able to make really complex things from gazillions of simple parts (both the complexity and the scale were far beyond computing, and this helped a lot, as did some of the solutions of Biology).

1. “Understanding Media” (1964) by Marshall McLuhn. I didn’t understand it when it came out, but spent the summer of 1967 learning how to understand McLuhan (partly by starting with “Gutenberg Galaxy”) and this was a biggie. What McLuhan was driving at is one of the most important perspectives on human beings.

1. “Sketchpad — a man-machine computation system” (1963) by Ivan Sutherland. His thesis — so it counts as a book — probably had the largest effect on me vis a vis computing when I first read it in 1966 (and to this day). It is the epitome of so many important ideas, perspectives, aspirations, etc. in computing.

1. “Semantic Information Processing” (ca 1963) ed. by Minsky. This essentially was digests of the first wave of AI theses by Minsky’s students plus several important papers by McCarthy and Minsky. Some of them were revelatory (e.g. the Thomas Evans Geometric Analogy solver, and the first McCarthy “fluents” paper).

1. “Computation: Finite and Infinite Machines” (1967) by Marvin Minsky. A truly lovely book —- another “kind of how you should be thinking about things”. Automata theory was already off the main track in computing, but this book was so beautifully done (and I also had a UG degree in pure math, so … It also got me to look at:

1. “Lisp 1.5 Manual” (1964) by John McCarthy et al. The front part of this is revelatory and struck me as “kind of how things should be done”.

1. “A Programming Language” (1962) by Ken Iverson (I read it in 1967). APL had not yet been implemented, but this book was hugely influential on many computerists. A really important different perspective on programming. Put this together with Lisp and Simula and Sketchpad, and you can loosen up your thoughts about programming.

1. “An Algol 60 Compiler” (1964) by Randell and Russell had the wonderful ideas — which were pulled off with a great implementation — of having models of programs and to have parallel semantically exact implementations for different purposes (e.g. an interpreter for programming and debugging, an optimizing compiler for production runs). This fit nicely with the advent of CAD and SIM (with Sketchpad and other early systems) along with “automatic FAB” to get a final product, that was the kind of thing that engineers concerned with computing could see happening to their fields (including the field of computing). Ironically, to this day, computing in general has done the least with CAD<->SIM->FAB (except in the remote reaches of computing research in ARPA and Parc, etc.).

