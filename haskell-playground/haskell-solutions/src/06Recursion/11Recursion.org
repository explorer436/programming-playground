Recursion is important to Haskell because unlike imperative languages, you do computations in Haskell by declaring what something is instead of declaring how you get it. 
That is why there are no while loops or for loops in Haskell and instead we many times have to use recursion to declare what something is.

The ~maximum~ function takes a list of things that can be ordered and returns the biggest of them.
#+begin_src haskell :exports both :results output
maximum [1,2,3]
#+end_src

#+RESULTS:
: 3

#+begin_src haskell :exports both :results output
:{
maximum' :: (Ord a) => [a] -> a  
maximum' [] = error "maximum of empty list"  
maximum' [x] = x  
maximum' (x:xs)   
  | x > maxTail = x  
  | otherwise = maxTail  
  where maxTail = maximum' xs  
:}
maximum' [1,2,3]    
#+end_src

#+RESULTS:
: 3

We use pattern matching to split a list into a head and a tail.
This is a very common idiom when doing recursion with lists, so get used to it.

Pattern matching goes great with recursion!
Imperative languages that don't have pattern matching have to make a lot of if else statements to test for edge conditions.

An even clearer way to write this function is to use `max`.
`max` is a function that takes two numbers and returns the bigger of them. 

#+begin_src haskell :exports both :results output
:{
maximum2 :: (Ord a) => [a] -> a  
maximum2 [] = error "maximum of empty list"  
maximum2 [x] = x  
maximum2 (x:xs) = max x (maximum2 xs)  
:}
maximum2 [1,2,3]   
#+end_src

  #+RESULTS:
  : 3


Note: Num is not a subclass of Ord. 
That means that what constitutes for a number doesn't really have to adhere to an ordering.
So that's why we have to specify both the Num and Ord class constraints when doing addition or subtraction and also comparison.

#+begin_src haskell :exports both :results output
:{
replicate' :: (Num i, Ord i) => i -> a -> [a]  
replicate' n x  
    | n <= 0    = []  
    | otherwise = x:replicate' (n-1) x
:}
replicate' 4 6    
#+end_src

#+RESULTS:
: [6,6,6,6]

We are using guards here instead of patterns because we're testing for a boolean condition. 
If n is less than or equal to 0, return an empty list. 
Otherwise return a list that has x as the first element and then x replicated n-1 times as the tail. 
Eventually, the (n-1) part will cause our function to reach the edge condition.

#+begin_src haskell :exports both :results output
:{
take' :: (Num i, Ord i) => i -> [a] -> [a]  
take' n _  
    | n <= 0   = []  
take' _ []     = []  
take' n (x:xs) = x : take' (n-1) xs 
:}
take' 3 [5,4,3,2,1]
#+end_src

#+RESULTS:
: [5,4,3]

#+begin_src haskell :exports both :results output
:{
reverse' :: [a] -> [a]  
reverse' [] = []  
reverse' (x:xs) = reverse' xs ++ [x]  
:}
reverse' [2,3,4]
#+end_src

#+RESULTS:
: [4,3,2]


#+begin_src haskell :exports both :results output
:{
zip' :: [a] -> [b] -> [(a,b)]  
zip' _ [] = []  
zip' [] _ = []  
zip' (x:xs) (y:ys) = (x,y):zip' xs ys 
:}
zip' ["smart", "hardworking"] ["bruce", "wayne"]
#+end_src

#+RESULTS:
: [("smart","bruce"),("hardworking","wayne")]

#+begin_src haskell :exports both :results output
:{
elem' :: (Eq a) => a -> [a] -> Bool  
elem' a [] = False  
elem' a (x:xs)  
    | a == x    = True  
    | otherwise = a `elem'` xs
:}
elem' 1 [1, 2]
#+end_src

#+RESULTS:
: True
