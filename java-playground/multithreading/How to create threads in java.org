** Method 1

Runnable interface is implemented by the Thread class.
A common protocol for all the objects that wish to execute in a different thread (than the calling thread) is to extend Runnable interface.
It is one of the ways of creating threads in Java.

examples:

[[https://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html]]

[[../multithreading/src/main/java/com/example/HelloRunnableFromNewThread.java]]

[[../multithreading/src/main/java/com/example/EdPressoRunnable.java]]

** Method 2

The other way to create a thread is by extending the Thread class.

[[../multithreading/src/main/java/com/example/ImplementThreadByExtendingThreadClass.java]]

** Runnable or Thread?

A class implementing Runnable interface can simply pass itself to create a Thread instance and can run thereafter. This eliminates the need of extending the Thread class for the purpose of executing the code in a separate thread.

1. Always prefer the use of Runnable over Thread. Here are the reasons.
1. When extending the Thread class, we're not overriding any of its methods. Instead, we override the method of Runnable (which Thread happens to implement). This is a clear violation of IS-A Thread principle
1. Creating an implementation of Runnable and passing it to the Thread class utilizes composition and not inheritance â€“ which is more flexible
1. After extending the Thread class, we can't extend any other class
1. From Java 8 onwards, Runnables can be represented as lambda expressions
