This supports an API spec file.
1. Spec-first approach.
1. Code is generated from the spec file.
1. Generating server code template for the operations in 01-go-and-gin using oapi-codegen

Library used:

https://github.com/oapi-codegen/oapi-codegen

Installation:

#+begin_src
$ go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest
(verify)
$ oapi-codegen -version
#+end_src

Generate code:

#+begin_src
oapi-codegen --package=main --generate types,client openapi.yaml > openapi.gen.go

oapi-codegen --package=main  --generate types,server openapi-albums.json > generatedserver-albums.go
oapi-codegen --package=main  --generate types,server openapi-petstore.yaml > generatedserver-petstore.go
#+end_src

Generating code for different server types using oapi-codegen:
#+begin_src
oapi-codegen -config server.cfg.chi.yaml openapi-ping.yaml
oapi-codegen -config server.cfg.echo.yaml openapi-ping.yaml
oapi-codegen -config server.cfg.fiber.yaml openapi-ping.yaml
oapi-codegen -config server.cfg.gin.yaml openapi-ping.yaml
oapi-codegen -config server.cfg.gorilla.mux.yaml openapi-ping.yaml
oapi-codegen -config server.cfg.iris.yaml openapi-ping.yaml
oapi-codegen -config server.cfg.stdnethttp.yaml openapi-ping.yaml

oapi-codegen -output generatedserver-ping-gin.go -config server.cfg.gin.yaml openapi-ping.yaml
oapi-codegen -o generatedserver-albums-gin.go -config server.cfg.gin.yaml openapi-albums.yaml
#+end_src

* Reading material

1. https://ldej.nl/post/generating-go-from-openapi-3/

* Other options to consider for working with OpenAPI specification files

https://www.reddit.com/r/golang/comments/udfujj/any_good_openapi_3x_spec_generator_for_a_go_rest/

1. Huma
   1. https://huma.rocks/why/
   1. https://github.com/danielgtaylor/huma