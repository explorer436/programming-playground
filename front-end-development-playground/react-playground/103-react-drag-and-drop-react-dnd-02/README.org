1. DndProvider:
   1. This component wraps your application (or the relevant part) and provides the context for react-dnd to work. It requires a backend prop.
2. HTML5Backend:
   1. This is the standard backend for web browsers, using the browser's built-in HTML5 drag and drop API.
3. ItemTypes:
   1. Using constants for types ('box') makes the code safer and more maintainable.
4. useDrag (in Box.js):
   1. type: Declares what kind of item this is when dragged (ItemTypes.BOX).
   2. item: Defines the data payload associated with the drag operation. When dropped, the drop target receives this object.
   3. collect: A function that retrieves state from the drag-and-drop system (the "monitor"). Here, we get isDragging to change the box's opacity while it's being dragged.
   4. The hook returns an array: [{ isDragging }, drag].
      1. isDragging is the collected state, and drag is a connector function that you attach to the DOM node you want to make draggable (ref={drag}).
5. useDrop (in Dustbin.js):
   1. accept:
      1. Specifies which type of draggable item this target will accept (ItemTypes.BOX). It only reacts to items matching this type.
   2. drop:
      1. A function that executes when a compatible item is actually dropped onto the target. It receives the item object (defined in useDrag) and the monitor. We use this to update the lastDroppedItem state.
   3. collect:
      1. Similar to useDrag, it retrieves state. isOver tells if a compatible item is currently hovering over the target, and canDrop tells if an item is being dragged that could be dropped here. We use these to change the background color for visual feedback.
   4. The hook returns [{ canDrop, isOver }, drop].
      1. canDrop and isOver are collected states, and drop is the connector function to attach to the drop target DOM node (ref={drop}).
6. State Management:
   1. Dustbin example
      1. In this simple example, the Dustbin uses useState to keep track of the lastDroppedItem.
      2. In more complex scenarios, you might lift state up to the parent component (App.js) or use a state management library (like Redux, Zustand, or Context API) to handle changes when items are dropped (e.g., moving an item from one list to another).
   2. Fruits example
      1. The groups state now holds the source of truth. It's an object where keys are group identifiers ('available', 'group1', 'group2') and values are arrays of fruit names currently in that group.
      2. initialGroups sets up the starting state.
      3. groupTitles is just for displaying friendly names.
7. handleDrop Function:
   1. This function is defined in App.js because App owns the state.
   2. It's passed down as a prop (onDropItem) to each Group.
   3. It receives the fruitName, the sourceGroupKey (where the fruit came from), and the targetGroupKey (where it was dropped to).
   4. It uses setGroups with a callback function to update the state immutably: it filters the fruit out of the source array and adds it to the target array.
   5. useCallback is used to memoize the handleDrop function, preventing unnecessary re-renders of Group components if App were to re-render for other reasons.
