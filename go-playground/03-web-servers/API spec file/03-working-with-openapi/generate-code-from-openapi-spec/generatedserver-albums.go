// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Album defines model for Album.
type Album struct {
	// Artist Album author, can be empty for multi-artist compilations.
	Artist *string `json:"artist,omitempty"`

	// Id ID is a unique string that determines album.
	Id string `json:"id"`

	// Price Price in USD.
	Price *float32 `json:"price,omitempty"`

	// Title Title of the album.
	Title string `json:"title"`
}

// RestErrResponse defines model for RestErrResponse.
type RestErrResponse struct {
	// Code Application-specific error code.
	Code *int `json:"code,omitempty"`

	// Context Application context.
	Context *map[string]interface{} `json:"context,omitempty"`

	// Error Error message.
	Error *string `json:"error,omitempty"`

	// Status Status text.
	Status *string `json:"status,omitempty"`
}

// PostAlbumsJSONRequestBody defines body for PostAlbums for application/json ContentType.
type PostAlbumsJSONRequestBody = Album

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Albums
	// (GET /albums)
	GetAlbums(ctx echo.Context) error
	// Post Albums
	// (POST /albums)
	PostAlbums(ctx echo.Context) error
	// Get Album By ID
	// (GET /albums/{id})
	GetAlbumByID(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlbums(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlbums(ctx)
	return err
}

// PostAlbums converts echo context to params.
func (w *ServerInterfaceWrapper) PostAlbums(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAlbums(ctx)
	return err
}

// GetAlbumByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlbumByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlbumByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/albums", wrapper.GetAlbums)
	router.POST(baseURL+"/albums", wrapper.PostAlbums)
	router.GET(baseURL+"/albums/:id", wrapper.GetAlbumByID)

}
