* Maven                                                               :TOC_9:
- [[#copy-artifacts-using-maven][copy-artifacts-using-maven]]
- [[#openapi-generator-maven-plugin-poc][openapi-generator-maven-plugin-poc]]
- [[#create-an-empty-java-project-from-terminal-using-maven-archetypes][Create an empty java project from terminal using maven archetypes]]
- [[#displaying-available-maven-dependency-updates][Displaying available Maven dependency updates:]]
- [[#errors-when-running-maven-commands][Errors when running maven commands]]
- [[#how-to-generate-maven-settingsxml-in-an-enterprise-environment][How to generate maven settings.xml in an enterprise environment?]]
- [[#maven-archetypes][Maven Archetypes]]
- [[#maven-how-to-use-a-specific-version-of-dependency][Maven How to use a specific version of dependency]]
- [[#maven-installation-details][Maven Installation details]]
    - [[#step-1-download-the-maven-binaries][Step 1: Download the Maven Binaries]]
    - [[#step-2-setting-m2_home-and-path-variables][Step 2: Setting M2_HOME and Path Variables]]
    - [[#step-3-verify-the-maven-installation][Step 3: Verify the Maven installation]]
- [[#maven-dependencymanagement-vs-dependencies][Maven dependencyManagement vs dependencies]]
    - [[#unwanted-inheritance][Unwanted inheritance.]]
- [[#maven-vs-gradle][Maven vs Gradle]]
- [[#understanding-dependencies-used-by-a-project-using-maven][Understanding dependencies used by a project using Maven]]
- [[#using-custom-jvm-config-with-maven][Using custom jvm-config with maven]]
- [[#how-are-mvn-clean-package-and-mvn-clean-install-different][How are "mvn clean package" and "mvn clean install" different?]]
- [[#helpful-documentation][Helpful documentation]]

* [[../java-playground/copy-artifacts-using-maven][copy-artifacts-using-maven]]

* [[../java-playground/openapi-generator-maven-plugin-poc][openapi-generator-maven-plugin-poc]]

* Create an empty java project from terminal using maven archetypes

  #+begin_src 
  mvn archetype:generate -DgroupId=com.my.company -DartifactId=test-java-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
  #+end_src

  Reference: https://maven.apache.org/guides/mini/guide-creating-archetypes.html

* Displaying available Maven dependency updates:

  To simply know if and how we can update our project, the right tool for the job is this command:
  #+begin_src 
  mvn versions:display-dependency-updates  
  #+end_src
  
  This command checks and shows if there are updates to the versions of the dependencies.

* Errors when running maven commands

  If you see errors when running maven commands, running ~mvn clean package~ will help.

  e.g.

  #+begin_src 
  [INFO] ------------------------------------------------------------------------
  [INFO] BUILD FAILURE
  [INFO] ------------------------------------------------------------------------
  [INFO] Total time:  0.740 s
  [INFO] Finished at: 2021-01-26T22:56:19+01:00
  [INFO] ------------------------------------------------------------------------
  [ERROR] Failed to execute goal org.apache.maven.plugins:maven-resources-plugin:3.2.0:resources (default-resources) on project sprinttool: Input length = 1 -> [Help 1]
  [ERROR]
  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
  [ERROR] Re-run Maven using the -X switch to enable full debug logging.
  [ERROR]
  [ERROR] For more information about the errors and possible solutions, please read the following articles:
  [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
  #+end_src

* How to generate maven settings.xml in an enterprise environment?

  You can generate the settings.xml file from the artifactory.
  If you have the link the artifactory, follow these steps to generate the settings.xml
  url for JFrog artifactory -> Set Me Up -> Tool - Maven -> Type password (if the artifactory is protected) and click on "generate the code snippet" and download the file. If the artifactory needs a password, the downloaded file will have a hash of the password.
  Drop this file in your .m2 directory and the applications in local computer should be able to connect to the artifactory.

* Maven Archetypes
  https://maven.apache.org/guides/introduction/introduction-to-archetypes.html
  
  If you have an existing application and wish to use it as a template for some other new applications that are not created yet, you can create an archetype from the existing application and then use that archetype to generate new applications using the command below.
  
  #+begin_src 
  mvn archetype: generate
  -DarchetypeGroupId=com.companyName.domainName
  -DarchetypeArtifactId=domain-archetype
  -DarchetypeVersion=1.0.0-SNAPSHOT
  -DgroupId=com.companyname.domainname
  -DartifactId=application-name
  -Dversion=1.0.0-SNAPSHOT
  -Dpackage=com.companyname.domainname.application.whateverelseyouwanttoaddhere
  -Dinvoker=ApplicationName
  -DspecName=application-name
  -Dport=8002
  -Dtitle="Application Name API"
  -B  
  #+end_src

* Maven How to use a specific version of dependency

  How to force a maven project to use older version of a dependency instead of a new version from another dependency?
  
  You can exclude the cyclic dependencies by using the <exclusions> tag in your pom.xml like this:
  
  #+begin_src 
    <dependency>
      <groupId>sample.ProjectB</groupId>
      <artifactId>Project-B</artifactId>
      <version>1.0-SNAPSHOT</version>
      <exclusions>
        <exclusion>
          <groupId>sample.ProjectE</groupId> <!-- Exclude Project-E from Project-B -->
          <artifactId>Project-E</artifactId>
        </exclusion>
      </exclusions>
    </dependency>  
  #+end_src
  
  Reference: https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html

* Maven Installation details

    Prerequisites: jdk

    See JavaInstallation.org for details about installing jdk

*** Step 1: Download the Maven Binaries

    Go to the URL: https://maven.apache.org/download.cgi Copy the link for the “Binary tar.gz archive” file.

    Then run the following commands to download and untar it.

    #+begin_src 
    $ tar -xvf apache-maven-3.6.3-bin.tar.gz
    #+end_src

*** Step 2: Setting M2_HOME and Path Variables

    See LinuxTips.org and then use the same pattern to add maven bin folder to PATH in .bashrc file.

    See SettingJavaHomeInLinux.org and then use the same pattern to add maven bin folder to PATH.

    Use ~.bashrc~ for Linux computers and ~.zshrc~ for Macbooks.

    https://maven.apache.org/install.html

    Add the following lines to .bashrc or .zshrc

    #+begin_src 
    export M2_HOME=/home/h/Documents/apache-maven-3.8.6
    export PATH=$M2_HOME/bin:$PATH
    #+end_src

    Relaunch the terminal or execute source .profile to apply the changes.    

*** Step 3: Verify the Maven installation

    Execute ~mvn -version~ command and it should produce the following output.

    #+begin_src 
    [h@h-p50-20eqs27p03 ~]$ mvn -version
    Apache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)
    Maven home: /home/h/Documents/apache-maven-3.8.6
    Java version: 18, vendor: Oracle Corporation, runtime: /home/h/Downloads/jdk-18
    Default locale: en_US, platform encoding: UTF-8
    OS name: "linux", version: "5.19.11-arch1-1", arch: "amd64", family: "unix"
    #+end_src

* Maven dependencyManagement vs dependencies

  A dependency defined under the ~dependencyManagement~ can be used in its child modules without specifying the version.

  A parent project (Pro-par) defines a dependency under the dependencyManagement:

  #+begin_src 
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>3.8</version>
      </dependency>
   </dependencies>
  </dependencyManagement>  
  #+end_src

  Then in the child of Pro-par, I can use the junit:

  #+begin_src 
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>
   </dependencies>
  #+end_src

  What problem does this solve? Is it necessary to define junit in the parent pom? Why not define it directly in the needed module?

  Dependency Management allows to consolidate and centralize the management of dependency versions without adding dependencies which are inherited by all children. This is especially useful when you have a set of projects (i.e. more than one) that inherits a common parent.

  Another extremely important use case of dependencyManagement is the control of versions of artifacts used in transitive dependencies.

*** Unwanted inheritance.

    Here's an incremental example:
    
    I declare in my parent pom:

    #+begin_src 
          <dependencies>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>19.0</version>
            </dependency>
    </dependencies>  
    #+end_src

    boom! I have it in my Child A, Child B and Child C modules:
    
    Implicilty inherited by child poms
    A single place to manage
    No need to redeclare anything in child poms
    I can still redelcare and override to version 18.0 in a Child B if I want to.
    But what if I end up not needing guava in Child C, and neither in the future Child D and Child E modules?
    
    They will still inherit it and this is undesired! This is just like Java God Object code smell, where you inherit some useful bits from a class, and a tonn of unwanted stuff as well.
    
    This is where <dependencyManagement> comes into play. When you add this to your parent pom, all of your child modules STOP seeing it. And thus you are forced to go into each individual module that DOES need it and declare it again (Child A and Child B, without the version though).
    
    And, obviously, you don't do it for Child C, and thus your module remains lean.

* Maven vs Gradle

Starting out with Gradle may seem easy, but based on previous experiences, using Maven will give us much more flexibility.
When it comes to Maven's power at confuguring profiles, environment variables, etc. the time spent to learn it once will be a good investment.

Just stick to using maven (and not Gradle) as much as you can.

Based on what I have seen so far, Maven is much more powerful and flexible if you invest a little bit of time learning it once.

* Understanding dependencies used by a project using Maven

  How to understand maven dependency tree for a project?
  Use this command to look at the dependency tree and make changes if necessary:
  
  #+begin_src 
  mvn dependency:tree  
  #+end_src

* Using custom jvm-config with maven

  If maven is having trouble working with the jdk version installed in the machine, and if you need to use custom jvm-config with maven in a project, this is the way to do it:
  
  In the project, create a directory with this name: ".mvn"
  In this directory, create a file with this name: "jvm.config"
  Add your custom config in that file:

  #+begin_src 
  --add-opens=java.base/java.util=ALL-UNNAMED
  #+end_src

* How are "mvn clean package" and "mvn clean install" different?

Both will clean. That means they'll remove the target folder. The real question is what's the difference between package and install?

package will compile your code and also package it. For example, if your pom says the project is a jar, it will create a jar for you when you package it and put it somewhere in the target directory (by default).

install will compile and package, but it will also put the package in your local repository. This will make it so other projects can refer to it and grab it from your local repository.

* Helpful documentation

   https://maven.apache.org/guides/
   https://www.vogella.com/tutorials/ApacheMaven/article.html#maven-vs-other-build-tools


